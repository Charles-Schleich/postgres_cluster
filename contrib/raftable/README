Raftable
========

This extension allows you to have a key-value table replicated between several
Postgres instances over Raft protocol.

Depends on
----------

Raft implementation in C: https://github.com/kvap/raft
Please compile the raft library with -fpic flag.

Internals
---------

Each 'postgres' instance starts a background worker 'raftable' and creates a
shared memory segment for storing the 'state'. All 'raftable' workers are
communicating Raft protocol over UDP.

When 'frontend' issues a read command, the 'backend' returns the data from the
local replica of the 'state' which is in the shared memory of current instance.

When 'frontend' issues a write command, the 'backend' connects to the current
'raftable' leader directly through TCP and sends an update. Raftable leader
returns 'ok' to the backend when the update gets applied on current instance.

The backend can also issue commands to itself through C API.

┓   ┏━━━━━━━━━┓┏━━━━━━━━━┓┏━━━━━━━━━┓   ┏━━━━━━━━━┓┏━━━━━━━━━┓┏━━━━━━━━━┓   ┏
┃   ┃ backend ┃┃ backend ┃┃ backend ┠─┐ ┃ backend ┃┃ backend ┃┃ backend ┃   ┃
┛   ┗━━━━┯━━━━┛┗━━━━┯━━━━┛┗━━━━┯━━━━┛ │ ┗━━━━┯━━━━┛┗━━━━┯━━━━┛┗━━━━┯━━━━┛   ┗
╗   ╔════╧══════════╧══════════╧════╗ T ╔════╧══════════╧══════════╧════╗   ╔
║   ║    state in shared memory     ║ C ║    state in shared memory     ║   ║
╝   ╚═══════════════╤═══════════════╝ P ╚═══════════════╤═══════════════╝   ╚
┓   ┏━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━┓ │ ┏━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━┓   ┏
┃   ┃        raftable worker        ┃ └─┨        raftable worker        ┃   ┃
┛   ┗━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━┛   ┗━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━┛   ┗
                    ┆                                   ┆
╴╴╴╴╴╴╴╴╴╴╴╴╴╴╴╴╴╴╴╴┴╶╶╶╶╶╶╶╶╶╶ Raft over UDP ╴╴╴╴╴╴╴╴╴╴┴╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶╶

C API:
	/* Gets value by key. Returns the value or NULL if not found. */
	char *raftable_get(char *key);

	/*
	 * Adds/updates value by key. Returns when the value gets replicated on
	 * current machine. Storing NULL will delete the item from the table.
	 */
	void raftable_set(char *key, char *value);

	/*
	 * Iterates over all items in the table, calling func(key, value, arg)
	 * for each of them.
	 */
	void raftable_every(void (*func)(char *, char *, void *), void *arg);

SQL API:
	-- set
	raftable(key varchar(64), value text);

	-- get
	raftable(key varchar(64)) returns text;

	-- list
	raftable() returns table (key varchar(64), value text);
