===
xtm
===

Distributed transaction management tools for PostgreSQL.

--------------------
Communication scheme
--------------------

      .- Backend -.
     /             \
    /               \
DTM ---- Backend ---- Coordinator
    \               /
     \             /
      `- Backend -Â´


-----------------------
Coordinator-Backend API
-----------------------

This API includes a set of postgres procedures that
the coordinator can call with "select" statement.

-- Informs the DTM about a global transaction
-- identified by the corresponding pairs of node:xid values.
dtm_begin_transaction(nodes integer[], xids integer[]) RETURNS void

-- Causes the backend to get a snapshot from the DTM
-- and merge it with the local snapshot.
dtm_get_snapshot() RETURNS void

----------
libdtm api
----------

typedef unsigned long long xid_t;

typedef int NodeId;

typedef struct {
    TransactionId* xids;
    NodeId* nodes;
    int nNodes;
} GlobalTransactionId;

// Connects to the specified DTM.
DTMConn DtmConnect(char *host, int port);

// Disconnects from the DTM. Do not use the 'dtm' pointer after this call, or
// bad things will happen.
void DtmDisconnect(DTMConn dtm);

// Creates an entry for a new global transaction. Returns 'true' on success, or
// 'false' otherwise.
bool DtmGlobalStartTransaction(DTMConn dtm, GlobalTransactionId* gtid);

// Asks DTM for a fresh snapshot. Returns 'true' on success, or 'false'
// otherwise.
bool DtmGlobalGetSnapshot(DTMConn dtm, NodeId nodeid, TransactionId xid, Snapshot snapshot);

// Commits transaction only once all participants have called this function,
// does not change CLOG otherwise. Returns 'true' on success, 'false' if
// something failed on the daemon side.
bool DtmGlobalSetTransStatus(DTMConn dtm, NodeId nodeid, TransactionId xid, XidStatus status);

// Gets the status of the transaction identified by 'xid'. Returns the status
// on success, or -1 otherwise. If 'wait' is true, then it does not return
// until the transaction is finished.
XidStatus DtmGlobalGetTransStatus(DTMConn dtm, NodeId nodeid, TransactionId xid, bool wait);

--------------------
Backend-DTM Protocol
--------------------

The queries from backend to DTM should be formatted according to this syntax.

	<char cmd><hex16 argc><hex16 argv[0]><hex16 argv[1]>...

<cmd> is a character representing a command.
<argc> is the number of arguments.
<argv[i]> are the arguments.

The commands:

'b': begin(size, node0, xid0, node1, xid1, ...)
	Starts a global transaction using 'xid0' on 'node0', 'xid1' on 'node1'
	and so on. The 'size' is the number of nodes, so for example if 'size'
	== 3 there are 6 values expected after it.
	
	The DTM replies with '+' if transaction started, or '-' if failed.

'c': commit(node, xid, wait)
	Tells the DTM to vote for commit of the global transaction identified
	by the given 'node:xid' pair.

	The DTM replies with '+' if committed, or '-' if aborted or failed.

	If 'wait' is true, DTM will not reply until it considers the
	transaction finished (all nodes committed, or at least one aborted).

'a': abort(node, xid)
	Tells the DTM to vote againts commit of the global transaction
	identified by the given 'node:xid' pair. This query not have the 'wait'
	parameter, because the DTM will not wait for all votes if one is
	against the commit.

	The DTM replies with '+' if aborted, or '-' if failed. The backend
	probably should ignore this reply anyway :)

'h': snapshot(node, xid)
	Tells the DTM to give a snapshot for the global transaction identified
	by the given 'node:xid' pair. The DTM will create a snapshot for every
	participant, so when they ask for the snapshot it will reply with the
	"same" snapshot. When a node asks for a snapshot once again, the DTM
	generates a fresh version for every participant. So be careful not to
	ask for a snapshot from the same node the second time, until all other
	nodes also ask for that snapshot.

	The DTM replies with '+' followed by a snapshot in the form:

		<hex16 xmin><hex16 xmax><hex16 xcnt><hex16 xip[0]>...

	In case of a failure, the DTM replies with '-'.

's': status(node, xid, wait)
	Asks the DTM about the status of the global transaction identified
	by the given 'node:xid' pair.

	The DTM replies with:
		"+0" if not started;
		"+c" if committed;
		"+a" if aborted;
		"+?" if in progress;
		'-' if failed.

	If 'wait' is true, DTM will not reply until it considers the
	transaction finished (all nodes committed, or at least one aborted).
