<!-- doc/src/xml/mvcc.xml -->

 <chapter id="mvcc">
  <title>Управление конкурентным доступом</title>

  <indexterm><primary>конкурентный доступ</primary></indexterm>

  <para>В этой главе описывается поведение СУБД <productname>&productname;</productname> в ситуациях, когда два или более сеансов пытаются одновременно обратиться к одним и тем же данным. В таких ситуациях важно, чтобы все сеансы могли эффективно работать с данными, и при этом сохранялась целостность данных. Обсуждаемые в этой главе темы заслуживают внимания всех разработчиков баз данных.</para>

  <sect1 id="mvcc-intro">
   <title>Введение</title>

   <indexterm><primary>Многоверсионное управление конкурентным доступом</primary></indexterm>

   <indexterm><primary>MVCC</primary></indexterm>

   <indexterm><primary>Сериализуемая изоляция снимков</primary></indexterm>

   <indexterm><primary>SSI</primary></indexterm>

   <para><productname>&productname;</productname> предоставляет разработчикам богатый набор средств для управления конкурентным доступом к данным. Внутри он поддерживает целостность данных, реализуя модель <acronym>MVCC</acronym> (Multiversion Concurrency Control, Многоверсионное управление конкурентным доступом). Это означает, что каждый SQL-оператор видит снимок данных (<firstterm>версию базы данных</firstterm>) на определённый момент времени, вне зависимости от текущего состояния данных. Это защищает операторы от несогласованности данных, возможной, если другие конкурирующие транзакции внесут изменения в те же строки данных, и обеспечивает тем самым <firstterm>изоляцию транзакций</firstterm> для каждого сеанса баз данных. <acronym>MVCC</acronym>, отходя от методик блокирования, принятых в традиционных СУБД, снижает уровень конфликтов блокировок и таким образом обеспечивает более высокую производительность в многопользовательской среде.</para>

   <para>Основное преимущество использования модели <acronym>MVCC</acronym> по сравнению с блокированием заключается в том, что блокировки <acronym>MVCC</acronym>, полученные для чтения данных, не конфликтуют с блокировками, полученными для записи, и поэтому чтение никогда не мешает записи, а запись чтению. <productname>&productname;</productname> гарантирует это даже для самого строгого уровня изоляции транзакций, используя инновационный уровень изоляции <acronym>SSI</acronym> (<firstterm>Serializable Snapshot Isolation</firstterm>, Сериализуемая изоляция снимков).</para>

   <para>Для приложений, которым в принципе не нужна полная изоляция транзакций и которые предпочитают явно определять точки конфликтов, в <productname>&productname;</productname> также есть средства блокировки на уровне таблиц и строк. Однако при правильном использовании <acronym>MVCC</acronym> обычно обеспечивает лучшую производительность, чем блокировки. Кроме этого, приложения могут использовать рекомендательные блокировки, не привязанные к какой-либо одной транзакции.</para>
  </sect1>

  <sect1 id="transaction-iso">
   <title>Изоляция транзакций</title>

   <indexterm><primary>изоляция транзакций</primary></indexterm>

   <para>Стандарт <acronym>SQL</acronym> определяет четыре уровня изоляции транзакций. Наиболее строгий из них &mdash; сериализуемый, определяется одним абзацем, говорящем, что при параллельном выполнении несколько сериализуемых транзакций должны гарантированно выдавать такой же результат, как если бы они запускались по очереди в некотором порядке. Остальные три уровня определяются через описания особых явлений, которые возможны при взаимодействии параллельных транзакций, но не допускаются на определённом уровне. Как отмечается в стандарте, из определения сериализуемого уровня вытекает, что на этом уровне ни одно из этих явлений не возможно. (В самом деле &mdash; если эффект транзакций должен быть тем же, что и при их выполнении по очереди, как можно было бы увидеть особые явления, связанные с другими транзакциями?)</para>

   <para>Стандарт описывает следующие особые условия, недопустимые для различных уровней изоляции: <variablelist>
     <varlistentry>
      <term>&laquo;грязное&raquo; чтение<indexterm><primary>&laquo;грязное&raquo; чтение</primary></indexterm></term>
     <listitem>
      <para>Транзакция читает данные, записанные параллельной незавершённой транзакцией.</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>неповторяемое чтение<indexterm><primary>неповторяемое чтение</primary></indexterm></term>
     <listitem>
      <para>Транзакция повторно читает те же данные, что и раньше, и обнаруживает, что они были изменены другой транзакцией (которая завершилась после первого чтения).</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>фантомное чтение<indexterm><primary>фантомное чтение</primary></indexterm></term>
     <listitem>
      <para>Транзакция повторно выполняет запрос, возвращающий набор строк для некоторого условия, и обнаруживает, что набор строк, удовлетворяющих условию, изменился из-за транзакции, завершившейся за это время.</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>аномалия сериализации <indexterm><primary>аномалия сериализации</primary></indexterm></term>
     <listitem>
      <para>Результат успешной фиксации группы транзакций оказывается несогласованным при всевозможных вариантах исполнения этих транзакций по очереди.</para>
      </listitem>
     </varlistentry>
    </variablelist></para>

   <para><indexterm><primary>уровень изоляции транзакций</primary></indexterm> Уровни изоляции транзакций, описанные в стандарте SQL и реализованные в &productname;, описываются в <xref remap="6" linkend="mvcc-isolevel-table"/>.</para>

    <table tocentry="1" id="mvcc-isolevel-table">
     <title>Уровни изоляции транзакций</title>
     <tgroup cols="5">
      <thead>
       <row>
        <entry>Уровень изоляции</entry>
        <entry>&laquo;Грязное&raquo; чтение</entry>
        <entry>Неповторяемое чтение</entry>
        <entry>Фантомное чтение</entry>
        <entry>Аномалия сериализации</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>Read uncommited (Чтение незафиксированных данных)</entry>
        <entry>Допускается, но не в PG</entry>
        <entry>Возможно</entry>
        <entry>Возможно</entry>
        <entry>Возможно</entry>
       </row>

       <row>
        <entry>Read committed (Чтение зафиксированных данных)</entry>
        <entry>Невозможно</entry>
        <entry>Возможно</entry>
        <entry>Возможно</entry>
        <entry>Возможно</entry>
       </row>

       <row>
        <entry>Repeatable read (Повторяемое чтение)</entry>
        <entry>Невозможно</entry>
        <entry>Невозможно</entry>
        <entry>Допускается, но не в PG</entry>
        <entry>Возможно</entry>
       </row>

       <row>
        <entry>Serializable (Сериализуемость)</entry>
        <entry>Невозможно</entry>
        <entry>Невозможно</entry>
        <entry>Невозможно</entry>
        <entry>Невозможно</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

   <para>В <productname>&productname;</productname> вы можете запросить любой из четырёх уровней изоляции транзакций, однако внутри реализованы только три различных уровня, то есть режим Read Uncommitted в &productname; действует как Read Committed. Причина этого в том, что только так можно сопоставить стандартные уровни изоляции с реализованной в &productname; архитектурой многоверсионного управления конкурентным доступом.</para>

   <para>В этой таблице также показано, что реализация Repeatable Read в &productname; не допускает фантомное чтение. Стандарт SQL допускает возможность более строгого поведения: четыре уровня изоляции определяют только, какие особые условия не должны наблюдаться, но не какие <emphasis>обязательно должны</emphasis>. Поведение имеющихся уровней изоляции подробно описывается в следующих подразделах.</para>

   <para>Для выбора нужного уровня изоляции транзакций используется команда <xref linkend="sql-set-transaction"/>.</para>

   <important>
     <para>Поведение некоторых функций и типов данных <productname>&productname;</productname> в транзакциях подчиняется особым правилам. В частности, изменения последовательностей (и следовательно, счётчика в столбце, объявленному как <type>serial</type>) немедленно видны во всех остальных транзакциях и не откатываются назад, если выполнившая их транзакция прерывается. См. <xref remap="4" linkend="functions-sequence"/> и <xref remap="4" linkend="datatype-serial"/>.</para>
   </important>

  <sect2 id="xact-read-committed">
   <title>Уровень изоляции Read Committed</title>

   <indexterm><primary>уровень изоляции транзакций</primary> <secondary>read committed</secondary></indexterm>

   <indexterm><primary>read committed</primary></indexterm>

   <para><firstterm>Read Committed</firstterm> &mdash; уровень изоляции транзакции, выбираемый в <productname>&productname;</productname> по умолчанию. В транзакции, работающей на этом уровне, запрос <command>SELECT</command> (без предложения <literal>FOR UPDATE/SHARE</literal>) видит только те данные, которые были зафиксированы до начала запроса; он никогда не увидит незафиксированных данных или изменений, внесённых в процессе выполнения запроса параллельными транзакциями. По сути запрос <command>SELECT</command> видит снимок базы данных в момент начала выполнения запроса. Однако <command>SELECT</command> видит результаты изменений, внесённых ранее в этой же транзакции, даже если они ещё не зафиксированы. Также заметьте, что два последовательных оператора <command>SELECT</command> могут видеть разные данные даже в рамках одной транзакции, если какие-то другие транзакции зафиксируют изменения после запуска первого <command>SELECT</command>, но до запуска второго.</para>

   <para>Команды <command>UPDATE</command>, <command>DELETE</command>, <command>SELECT FOR UPDATE</command> и <command>SELECT FOR SHARE</command> ведут себя подобно <command>SELECT</command> при поиске целевых строк: они найдут только те целевые строки, которые были зафиксированы на момент начала команды. Однако к моменту, когда они будут найдены, эти целевые строки могут быть уже изменены (а также удалены или заблокированы) другой параллельной транзакцией. В этом случае запланированное изменение будет отложено до фиксирования или отката первой изменяющей данные транзакции (если она ещё выполняется). Если первая изменяющая транзакция откатывается, её результат отбрасывается и вторая изменяющая транзакция может продолжить изменение изначально полученной строки. Если первая транзакция зафиксировалась, но в результате удалила эту строку, вторая будет игнорировать её, а в противном случае попытается выполнить свою операцию с изменённой версией строки. Условие поиска в команде (предложение <literal>WHERE</literal>) вычисляется повторно для выяснения, соответствует ли по-прежнему этому условию изменённая версия строки. Если да, вторая изменяющая транзакция продолжают свою работу с изменённой версией строки. Применительно к командам <command>SELECT FOR UPDATE</command> и <command>SELECT FOR SHARE</command> это означает, что изменённая версия строки блокируется и возвращается клиенту.</para>

   <para>Похожим образом ведёт себя <command>INSERT</command> с предложением <literal>ON CONFLICT DO UPDATE</literal>. В режиме Read Committed каждая строка, предлагаемая для добавления, будет либо вставлена, либо изменена. Если не возникнет несвязанных ошибок, гарантируется один из этих двух исходов. Если конфликт будет вызван другой транзакцией, результат которой ещё не видим для <command>INSERT</command>, предложение <command>UPDATE</command> подействует на эту строку, даже несмотря на то, что эта команда обычным образом может не видеть <emphasis>никакую</emphasis> версию этой строки.</para>

   <para>При выполнении <command>INSERT</command> с предложением <literal>ON CONFLICT DO NOTHING</literal> строка может не добавиться в результате действия другой транзакции, эффект которой не виден в снимке команды <command>INSERT</command>. Это опять же имеет место только в режиме Read Committed.</para>

   <para>Вследствие описанных выше правил, изменяющая команда может увидеть несогласованное состояние: она может видеть результаты параллельных команд, изменяющих те же строки, что пытается изменить она, но при этом она не видит результаты этих команд в других строках таблиц. Из-за этого поведения уровень Read Committed не подходит для команд со сложными условиями поиска; однако он вполне пригоден для простых случаев. Например, рассмотрим изменение баланса счёта в таких транзакциях: <screen>
BEGIN;
UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 12345;
UPDATE accounts SET balance = balance - 100.00 WHERE acctnum = 7534;
COMMIT;
</screen> Если две такие транзакции пытаются параллельно изменить баланс счёта 12345, мы, естественно, хотим, чтобы вторая транзакция работала с изменённой версией строки счёта. Так как каждая команда влияет только на определённую строку, если она будет видеть изменённую версию строки, это не приведёт к проблемам несогласованности.</para>

   <para>В более сложных ситуациях уровень Read Committed может приводить к нежелательным результатам. Например, рассмотрим команду <command>DELETE</command>, работающую со строками, которые параллельно добавляет и удаляет из множества, определённого её условием, другая команда. Например, предположим, что <literal>website</literal> &mdash; таблица из двух строк, в которых <literal>website.hits</literal> равны <literal>9</literal> и <literal>10</literal>: <screen>
BEGIN;
UPDATE website SET hits = hits + 1;
-- выполняется параллельно:  DELETE FROM website WHERE hits = 10;
COMMIT;
</screen> Команда <command>DELETE</command> не сделает ничего, даже несмотря на то, что строка с <literal>website.hits = 10</literal> была в таблице и до, и после выполнения <command>UPDATE</command>. Это происходит потому, что строка со значением <literal>9</literal> до изменения пропускается, а когда команда <command>UPDATE</command> завершается и <command>DELETE</command> получает освободившуюся блокировку, строка с <literal>10</literal> теперь содержит <literal>11</literal>, а это значение уже не соответствует условию.</para>

   <para>Так как в режиме Read Committed каждая команда начинается с нового снимка состояния, который включает результаты всех транзакций, зафиксированных к этому моменту, последующие команды в одной транзакции будут в любом случае видеть эффекты всех параллельных зафиксированных транзакций. Вопрос здесь состоит в том, видит ли <emphasis>одна</emphasis> команда абсолютно согласованное состояние базы данных.</para>

   <para>Частичная изоляция транзакция, обеспечиваемая в режиме Read Committed, приемлема для множества приложений. Этот режим быстр и прост в использовании, однако он подходит не для всех случаев. Приложениям, выполняющим сложные запросы и изменения, могут потребоваться более строго согласованное представление данных, чем то, что даёт Read Committed.</para>
  </sect2>

  <sect2 id="xact-repeatable-read">
   <title>Уровень изоляции Repeatable Read</title>

   <indexterm><primary>уровень изоляции транзакций</primary> <secondary>repeatable read</secondary></indexterm>

   <indexterm><primary>repeatable read</primary></indexterm>

   <para>В режиме <firstterm>Repeatable Read</firstterm> видны только те данные, которые были зафиксированы до начала транзакции, но не видны незафиксированные данные и изменения, произведённые другими транзакциями в процессе выполнения данной транзакции. (Однако запрос будет видеть эффекты предыдущих изменений в своей транзакции, несмотря на то, что они не зафиксированы.) Это самое строгое требование, которое стандарт <acronym>SQL</acronym> вводит для этого уровня изоляции, и при его выполнении предотвращаются все явления, описанные в <xref remap="6" linkend="mvcc-isolevel-table"/>, за исключением аномалий реализации. Как было сказано выше, это не противоречит стандарту, так как он определяет только <emphasis>минимальную</emphasis> защиту, которая должна обеспечиваться на каждом уровне изоляции.</para>

   <para>Этот уровень отличается от Read Committed тем, что запрос в транзакции данного уровня видит снимок данных на момент начала первого оператора в <emphasis>транзакции</emphasis> (не считая команд управления транзакциями), а не начала текущего оператора. Таким образом, последовательные команды <command>SELECT</command> в <emphasis>одной</emphasis> транзакции видят одни и те же данные; они не видят изменений, внесённых и зафиксированных другими транзакциями после начала их текущей транзакции.</para>

   <para>Приложения, использующие этот уровень, должны быть готовы повторить транзакции в случае сбоев сериализации.</para>

   <para>Команды <command>UPDATE</command>, <command>DELETE</command>, <command>SELECT FOR UPDATE</command> и <command>SELECT FOR SHARE</command> ведут себя подобно <command>SELECT</command> при поиске целевых строк: они найдут только те целевые строки, которые были зафиксированы на момент начала транзакции. Однако к моменту, когда они будут найдены, эти целевые строки могут быть уже изменены (а также удалены или заблокированы) другой параллельной транзакцией. В этом случае транзакция в режиме Repeatable Read будет ожидать фиксирования или отката первой изменяющей данные транзакции (если она ещё выполняется). Если первая изменяющая транзакция откатывается, её результат отбрасывается и текущая транзакция может продолжить изменение изначально полученной строки. Если же первая транзакция зафиксировалась и в результате изменила или удалила эту строку, а не просто заблокировала её, произойдёт откат текущей транзакции с сообщением <screen>
ОШИБКА: не удалось сериализовать доступ из-за параллельного изменения
</screen> так как транзакция уровня Repeatable Read не может изменять или блокировать строки, изменённые другими транзакциями с момента её начала.</para>

   <para>Когда приложение получает это сообщение об ошибке, оно должна прервать текущую транзакцию и попытаться повторить её с самого начала. Во второй раз транзакция увидит внесённое до этого изменение как часть начального снимка базы данных, так что новая версия строки вполне может использоваться в качестве отправной точки для изменения в повторной транзакции.</para>

   <para>Заметьте, что потребность в повторении транзакции может возникнуть, только если эта транзакция изменяет данные; в транзакциях, которые только читают данные, конфликтов сериализации не бывает.</para>

   <para>Режим Repeatable Read строго гарантирует, что каждая транзакция видит полностью стабильное представление базы данных. Однако это представление не обязательно будет согласовано с некоторым последовательным выполнением транзакций одного уровня. Например, даже транзакция, которая только читает данные, в этом режиме может видеть строку, показывающую, что некоторое задание завершено, но <emphasis>не</emphasis> видеть одну из строк логических частей задания, так как эта транзакция может прочитать более раннюю версию строки задания, чем ту, для которой параллельно добавлялась очередная логическая часть. Строго исполнить бизнес-правила в транзакциях, работающих на этом уровне изоляции, скорее всего не удастся без явных блокировок конфликтующих транзакций.</para>

   <note>
    <para>До версии 9.1 в <productname>PostgreSQL</productname> при запросе режима Serializable поведение системы в точности соответствовало вышеописанному. Таким образом, чтобы сейчас получить старое поведение Serializable, нужно запрашивать режим Repeatable Read.</para>
   </note>
  </sect2>

  <sect2 id="xact-serializable">
   <title>Уровень изоляции Serializable</title>

   <indexterm><primary>уровень изоляции транзакций</primary> <secondary>serializable</secondary></indexterm>

   <indexterm><primary>serializable</primary></indexterm>

   <indexterm><primary>предикатная блокировка</primary></indexterm>

   <indexterm><primary>аномалия сериализации</primary></indexterm>

   <para>Уровень <firstterm>Serializable</firstterm> обеспечивает самую строгую изоляцию транзакций. На этом уровне моделируется последовательное выполнение всех зафиксированных транзакций, как если бы транзакции выполнялись одна за другой, последовательно, а не параллельно. Однако, как и на уровне Repeatable Read, на этом уровне приложения должны быть готовы повторять транзакции из-за сбоев сериализации. Фактически этот режим изоляции работает так же, как и Repeatable Read, только он дополнительно отслеживает условия, при которых результат параллельно выполняемых сериализуемых транзакций может не согласовываться с результатом этих же транзакций, выполняемых по очереди. Это отслеживание не привносит дополнительных препятствий для выполнения, кроме тех, что присущи режиму Repeatable Read, но тем не менее создаёт некоторую добавочную нагрузку, а при выявлении исключительных условий регистрируется <firstterm>аномалия сериализации</firstterm> и происходит <firstterm>сбой сериализации</firstterm>.</para>

   <para>Например, рассмотрим таблицу <structname>mytab</structname>, изначально содержащую: <screen>
 class | value
-------+-------
     1 |    10
     1 |    20
     2 |   100
     2 |   200
</screen> Предположим, что сериализуемая транзакция A вычисляет: <screen>
SELECT SUM(value) FROM mytab WHERE class = 1;
</screen> а затем вставляет результат (30) в поле <structfield>value</structfield> в новую строку со значением <structfield>class</structfield><literal> = 2</literal>. В это же время сериализуемая транзакция B вычисляет: <screen>
SELECT SUM(value) FROM mytab WHERE class = 2;
</screen> получает результат 300 и вставляет его в новую строку со значением <structfield>class</structfield><literal> = 1</literal>. Затем обе транзакции пытаются зафиксироваться. Если бы одна из этих транзакций работала в режиме Repeatable Read, зафиксироваться могли бы обе; но так как полученный результат не соответствовал бы последовательному порядку, в режиме Serializable будет зафиксирована только одна транзакция, а вторая закончится откатом с сообщением: <screen>
ОШИБКА: не удалось сериализовать доступ из-за зависимостей чтения/записи между
  транзакциями
</screen> Это объясняется тем, что при выполнении A перед B транзакция B вычислила бы сумму 330, а не 300, а при выполнении в обратном порядке A вычислила бы другую сумму.</para>

   <para>Рассчитывая, что сериализуемые транзакции предотвратят аномалии, важно понимать, что любые данные, полученные из постоянной таблицы пользователя, не должны считаться действительными, пока транзакция, прочитавшая их, не будет успешно зафиксирована. Это верно даже для транзакций, не модифицирующих данные, за исключением случая, когда данные считываются в <firstterm>откладываемой</firstterm> транзакции такого типа. В этом случае данные могут считаться действительными, так как такая транзакция ждёт, пока не сможет получить снимок, гарантированно предотвращающий подобные проблемы. Во всех остальных случаях приложения не должны полагаться на результаты чтения данных в транзакции, которая не была зафиксирована; в случае ошибки и отката приложения должны повторять транзакцию, пока она не будет завершена успешно.</para>

   <para>Для полной гарантии сериализуемости в <productname>&productname;</productname> применяются <firstterm>предикатные блокировки</firstterm>, то есть блокировки, позволяющие определить, когда запись могла бы повлиять на результат предыдущего чтения параллельной транзакции, если бы эта запись выполнялась сначала. В <productname>&productname;</productname> эти блокировки не приводят к фактическим блокировкам данным и следовательно никоим образом <emphasis>не</emphasis> могут повлечь взаимоблокировки транзакций. Они помогают выявить и отметить зависимости между параллельными транзакциями уровня Serializable, которые в определённых сочетаниях могут приводить к аномалиям сериализации. Транзакции Read Committed или Repeatable Read для обеспечения целостности данных, напротив, должны либо блокировать таблицы целиком, что помешает пользователям обращаться к этим таблицам, либо применять <literal>SELECT FOR UPDATE</literal> или <literal>SELECT FOR SHARE</literal>, что не только заблокирует другие транзакции, но и создаст дополнительную нагрузку на диск.</para>

   <para>Предикатные блокировки в <productname>&productname;</productname>, как и в большинстве других СУБД, устанавливаются для данных, фактически используемых в транзакции. Они отображаются в системном представлении <link linkend="view-pg-locks"><structname>pg_locks</structname></link> со значением <literal>mode</literal> равным <literal>SIReadLock</literal>. Какие именно блокировки будут затребованы при выполнении запроса, зависит от плана запроса, при этом детализированные блокировки (например, блокировки строк) могут объединяться в более общие (например, в блокировки страниц) в процессе транзакции для экономии памяти, расходуемой для отслеживания блокировок. Транзакция <literal>READ ONLY</literal> может даже освободить свои блокировки SIRead до завершения, если обнаруживается, что конфликты, которые могли бы привести к аномалии сериализации, исключены. На самом деле для транзакций <literal>READ ONLY</literal> этот факт чаще всего устанавливается в самом начале, так что они обходятся без предикатных блокировок. Если же вы явно запросите транзакцию <literal>SERIALIZABLE READ ONLY DEFERRABLE</literal>, она будет заблокирована до тех пор, пока не сможет установить этот факт. (Это <emphasis>единственный</emphasis> случай, когда транзакции уровня Serializable блокируются, а транзакции Repeatable Read &mdash; нет.) С другой стороны, блокировки SIRead часто должны сохраняться и после фиксирования транзакции, пока не будут завершены другие, наложившиеся на неё транзакции.</para>

   <para>При правильном использовании сериализуемые транзакции могут значительно упростить разработку приложений. Гарантия того, что любое сочетание успешно зафиксированных параллельных сериализуемых транзакций даст тот же результат, что и последовательность этих транзакций, выполненных по очереди, означает, что если вы уверены, что единственная транзакция определённого содержания работает правильно, когда она запускается отдельно, вы можете быть уверены, что она будет работать так же правильно в любом сочетании сериализуемых транзакций, вне зависимости от того, что они делают, либо же она не будет зафиксирована успешно. При этом важно, чтобы в среде, где применяется этот подход, была реализована общая обработка сбоев сериализации (которые можно определить по значению SQLSTATE '40001'), так как заведомо определить, какие именно транзакции могут стать жертвами зависимостей чтения/записи и не будут зафиксированы для предотвращения аномалий сериализации, обычно очень сложно. Отслеживание зависимостей чтения-записи неизбежно создаёт дополнительную нагрузку, как и перезапуск транзакций, не зафиксированных из-за сбоев сериализации, но если на другую чашу весов положить нагрузку и блокирование, связанные с применением явных блокировок и <literal>SELECT FOR UPDATE</literal> или <literal>SELECT FOR SHARE</literal>, использовать сериализуемые транзакции в ряде случаев окажется выгоднее.</para>

   <para>Тогда как уровень изоляции транзакций Serializable в <productname>&productname;</productname> позволяет фиксировать параллельные транзакции, только если есть уверенность, что тот же результат будет получен при последовательном их выполнении, он не всегда предотвращает ошибки, которые не возникли бы при действительно последовательном выполнении. В частности, можно столкнуться с нарушениями ограничений уникальности, вызванными наложением сериализуемых транзакций, даже после явной проверки отсутствия ключа перед добавлением его. Этого можно избежать, если <emphasis>все</emphasis> сериализуемые транзакции, добавляющие потенциально конфликтующие ключи, будут предварительно явно проверять, можно ли вставить ключ. Например, приложение, добавляющее новый ключ, может запрашивать его у пользователя и затем проверять, существует ли он, сначала пытаясь найти его, либо генерировать новый ключ, выбирая максимальное существующее значение и увеличивая его на один. Если некоторые сериализуемые транзакции добавляют новые ключи сразу, не следуя этому протоколу, возможны нарушения ограничений уникальности, даже когда они не наблюдались бы при последовательном выполнении этих транзакций.</para>

   <para>Применяя сериализуемые транзакции для управления конкурентным доступом, примите к сведению следующие рекомендации: <itemizedlist>
     <listitem>
      <para>Объявляйте транзакции как <literal>READ ONLY</literal>, если это отражает их суть.</para>
     </listitem>
     <listitem>
      <para>Управляйте числом активных подключений, при необходимости используя пул соединений. Это всегда полезно для увеличения производительности, но особенно важно это в загруженной системе с сериализуемыми транзакциями.</para>
     </listitem>
     <listitem>
      <para>Заключайте в одну транзакцию не больше команд, чем необходимо для обеспечения целостности.</para>
     </listitem>
     <listitem>
      <para>Не оставляйте соединения <quote>простаивающими в транзакции</quote> дольше, чем необходимо. Для автоматического отключения затянувшихся транзакций можно применить параметр конфигурации <xref linkend="guc-idle-in-transaction-session-timeout"/>.</para>
     </listitem>
     <listitem>
      <para>Исключите явные блокировки, <literal>SELECT FOR UPDATE</literal> и <literal>SELECT FOR SHARE</literal> там, где они не нужны благодаря защите, автоматически предоставляемой сериализуемыми транзакциями.</para>
     </listitem>
     <listitem>
      <para>Когда система вынуждена объединять предикатные блокировки уровня страницы в одну предикатную блокировку уровня таблицы из-за нехватки памяти, может возрасти частота сбоев сериализации. Избежать этого можно, увеличив параметр <xref linkend="guc-max-pred-locks-per-transaction"/>.</para>
     </listitem>
     <listitem>
      <para>Последовательное сканирование всегда влечёт за собой предикатную блокировку на уровне таблицы. Это приводит к увеличению сбоев сериализации. В таких ситуациях бывает полезно склонить систему к использованию индексов, уменьшая <xref linkend="guc-random-page-cost"/> и/или увеличивая <xref linkend="guc-cpu-tuple-cost"/>. Однако тут важно сопоставить выигрыш от уменьшения числа откатов и перезапусков транзакций с проигрышем от возможного менее эффективного выполнения запросов.</para>
     </listitem>
    </itemizedlist></para>
  </sect2>
 </sect1>

  <sect1 id="explicit-locking">
   <title>Явные блокировки</title>

   <indexterm><primary>lock</primary></indexterm>

   <para>Для управления параллельным доступом к данным в таблицах <productname>&productname;</productname> предоставляет несколько режимов явных блокировок. Эти режимы могут применяться для блокировки данных со стороны приложения в ситуациях, когда <acronym>MVCC</acronym> не даёт желаемый результат. Кроме того, большинство команд <productname>&productname;</productname> автоматически получают блокировки соответствующих режимов, защищающие от удаления или изменения задействованных таблиц, несовместимого с характером выполняемой команды. (Например, <command>TRUNCATE</command> не может безопасно выполняться одновременно с другими операциями с этой таблицей, так что во избежание конфликта эта команда получает исключительную блокировку для данной таблицы.)</para>

   <para>Список текущих активных блокировок на сервере можно получить, прочитав системное представление <link linkend="view-pg-locks"><structname>pg_locks</structname></link>. За дополнительными сведениями о наблюдении за состоянием менеджера блокировок обратитесь к <xref remap="3" linkend="monitoring"/>.</para>

  <sect2 id="locking-tables">
   <title>Блокировки на уровне таблицы</title>

   <indexterm zone="locking-tables"><primary>LOCK</primary></indexterm>

   <para>В приведённом ниже списке перечислены имеющиеся режимы блокировок и контексты, где их автоматически применяет <productname>&productname;</productname>. Вы можете также явно запросить любую из этих блокировок с помощью команды <xref linkend="sql-lock"/>. Помните, что все эти режимы работают на уровне таблицы, даже если имя режима содержит слово <quote>row</quote>; такие имена сложились исторически. В некоторой степени эти имена отражают типичное применение каждого режима блокировки, но смысл у всех один. Единственное, что действительно отличает один режим блокировки от другого, это набор режимов, с которыми конфликтует каждый из них (см. <xref remap="4" linkend="table-lock-compatibility"/>). Две транзакции не могут одновременно владеть блокировками конфликтующих режимов для одной и той же таблицы. (Однако учтите, что транзакция никогда не конфликтует с собой. Например, она может запросить блокировку <literal>ACCESS EXCLUSIVE</literal>, а затем <literal>ACCESS SHARE</literal> для той же таблицы.) При этом разные транзакции свободно могут одновременно владеть блокировками неконфликтующих режимов. Заметьте, что некоторые режимы блокировки конфликтуют сами с собой (например, блокировкой <literal>ACCESS EXCLUSIVE</literal> в один момент времени может владеть только одна транзакция), а некоторые &mdash; нет (например, блокировку <literal>ACCESS SHARE</literal> могут получить сразу несколько транзакций).</para>

     <variablelist>
      <title>Режимы блокировок на уровне таблицы</title>
      <varlistentry>
       <term>
        <literal>ACCESS SHARE</literal>
       </term>
       <listitem>
        <para>Конфликтует только с режимом блокировки <literal>ACCESS EXCLUSIVE</literal>.</para>

        <para>Команда <command>SELECT</command> получает такую блокировку для таблиц, на которые она ссылается. Вообще говоря, блокировку в этом режиме получает любой запрос, который только <emphasis>читает</emphasis> таблицу, но не меняет её данные.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>ROW SHARE</literal>
       </term>
       <listitem>
        <para>Конфликтует с режимами блокировки <literal>EXCLUSIVE</literal> и <literal>ACCESS EXCLUSIVE</literal>.</para>

        <para>Команды <command>SELECT FOR UPDATE</command> и <command>SELECT FOR SHARE</command> получают такую блокировку для своих целевых таблиц (помимо блокировок <literal>ACCESS SHARE</literal> для любых таблиц, которые используется в этих запросов, но не в предложении <option>FOR UPDATE/FOR SHARE</option>).</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>ROW EXCLUSIVE</literal>
       </term>
       <listitem>
        <para>Конфликтует с режимами блокировки <literal>SHARE</literal>, <literal>SHARE ROW EXCLUSIVE</literal>, <literal>EXCLUSIVE</literal> и <literal>ACCESS EXCLUSIVE</literal>.</para>

        <para>Команды <command>UPDATE</command>, <command>DELETE</command> и <command>INSERT</command> получают такую блокировку для целевой таблицы (в дополнение к блокировкам <literal>ACCESS SHARE</literal> для всех других задействованных таблиц). Вообще говоря, блокировку в этом режиме получает любая команда, которая <emphasis>изменяет данные</emphasis> в таблице.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>SHARE UPDATE EXCLUSIVE</literal>
       </term>
       <listitem>
        <para>Конфликтует с режимами блокировки <literal>SHARE UPDATE EXCLUSIVE</literal>, <literal>SHARE</literal>, <literal>SHARE ROW EXCLUSIVE</literal>, <literal>EXCLUSIVE</literal> и <literal>ACCESS EXCLUSIVE</literal>. Этот режим защищает таблицу от параллельного изменения схемы и запуска процесса <command>VACUUM</command>.</para>

        <para>Запрашивается командами <command>VACUUM</command> (без <option>FULL</option>), <command>ANALYZE</command>, <command>CREATE INDEX CONCURRENTLY</command>, <command>ALTER TABLE VALIDATE</command> и другими видами <command>ALTER TABLE</command> (за подробностями обратитесь к <xref remap="3" linkend="sql-altertable"/>).</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>SHARE</literal>
       </term>
       <listitem>
        <para>Конфликтует с режимами блокировки <literal>ROW EXCLUSIVE</literal>, <literal>SHARE UPDATE EXCLUSIVE</literal>, <literal>SHARE ROW EXCLUSIVE</literal>, <literal>EXCLUSIVE</literal> и <literal>ACCESS EXCLUSIVE</literal>. Этот режим защищает таблицу от параллельного изменения данных.</para>

        <para>Запрашивается командой <command>CREATE INDEX</command> (без параметра <option>CONCURRENTLY</option>).</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>SHARE ROW EXCLUSIVE</literal>
       </term>
       <listitem>
        <para>Конфликтует с режимами блокировки <literal>ROW EXCLUSIVE</literal>, <literal>SHARE UPDATE EXCLUSIVE</literal>, <literal>SHARE</literal>, <literal>SHARE ROW EXCLUSIVE</literal>, <literal>EXCLUSIVE</literal> и <literal>ACCESS EXCLUSIVE</literal>. Этот режим защищает таблицу от параллельных изменений данных и при этом он является самоисключающим, так что такую блокировку может получить только один сеанс.</para>

        <para>Запрашивается командой <command>CREATE TRIGGER</command> и многими формами <command>ALTER TABLE</command> (см. <xref remap="4" linkend="sql-altertable"/>).</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>EXCLUSIVE</literal>
       </term>
       <listitem>
        <para>Конфликтует с режимами блокировки <literal>ROW SHARE</literal>, <literal>ROW EXCLUSIVE</literal>, <literal>SHARE UPDATE EXCLUSIVE</literal>, <literal>SHARE</literal>, <literal>SHARE ROW EXCLUSIVE</literal>, <literal>EXCLUSIVE</literal> и <literal>ACCESS EXCLUSIVE</literal>. Этот режим совместим только с блокировкой <literal>ACCESS SHARE</literal>, то есть параллельно с транзакцией, получившей блокировку в этой режиме, допускается только чтение таблицы.</para>

        <para>Запрашивается командой <command>REFRESH MATERIALIZED VIEW CONCURRENTLY</command>.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>ACCESS EXCLUSIVE</literal>
       </term>
       <listitem>
        <para>Конфликтует с режимами блокировок <literal>ACCESS SHARE</literal>, <literal>ROW SHARE</literal>, <literal>ROW EXCLUSIVE</literal>, <literal>SHARE UPDATE EXCLUSIVE</literal>, <literal>SHARE</literal>, <literal>SHARE ROW EXCLUSIVE</literal>, <literal>EXCLUSIVE</literal> и <literal>ACCESS EXCLUSIVE</literal>. Этот режим гарантирует, что кроме транзакции, получившей эту блокировку, никакая другая транзакция не может обращаться к таблице каким-либо способом.</para>

        <para>Запрашивается командами <command>DROP TABLE</command>, <command>TRUNCATE</command>, <command>REINDEX</command>, <command>CLUSTER</command>, <command>VACUUM FULL</command> и <command>REFRESH MATERIALIZED VIEW</command> (без <option>CONCURRENTLY</option>). Блокировку на этом уровне запрашивают также многие виды <command>ALTER TABLE</command>. В этом режиме по умолчанию запрашивают блокировку и операторы <command>LOCK TABLE</command>, если явно не выбран другой режим.</para>
       </listitem>
      </varlistentry>
     </variablelist>

     <tip>
      <para>Только блокировка <literal>ACCESS EXCLUSIVE</literal> блокирует оператор <command>SELECT</command> (без <option>FOR UPDATE/SHARE</option>).</para>
     </tip>

     <para>Кроме того, для поддержки системы <application>1С:Предприятие</application> реализованы ещё два режима блокировок. Эти режимы не конфликтуют ни с какими режимами, описанными выше. Их можно использовать, но лучше вместо них применять <link linkend="advisory-locks">рекомендательные блокировки</link>, которые предоставляют ту же функциональность.</para>

     <variablelist>
      <varlistentry>
       <term>
        <literal>APPLICATION SHARE</literal>
       </term>
       <listitem>
        <para>Конфликтует только с режимом блокировки <literal>APPLICATION EXCLUSIVE</literal>.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>APPLICATION EXCLUSIVE</literal>
       </term>
       <listitem>
        <para>Конфликтует с режимами блокировок <literal>APPLICATION SHARE</literal> и <literal>APPLICATION EXCLUSIVE</literal>.</para>
       </listitem>
      </varlistentry>
     </variablelist>

   <para>Полученная транзакцией блокировка обычно сохраняется до конца транзакции. Но если блокировка получена после установки точки сохранения, она освобождается немедленно в случае отката к этой точке. Это согласуется с принципом действия <command>ROLLBACK</command> &mdash; эта команда отменяет эффекты всех команд после точки сохранения. То же справедливо и для блокировок, полученных в блоке исключений <application>PL/pgSQL</application>: при выходе из блока с ошибкой такие блокировки освобождаются.</para>



    <table tocentry="1" id="table-lock-compatibility">
     <title>Конфликтующие режимы блокировки</title>
     <tgroup cols="11">
      <colspec colnum="2" colname="lockst"/>
      <colspec colnum="11" colname="lockend"/>
      <spanspec namest="lockst" nameend="lockend" spanname="lockreq"/>
      <thead>
       <row>
        <entry morerows="1">Запраши&#8203;ваемый режим блоки&#8203;ровки</entry>
        <entry spanname="lockreq">Текущий режим блокировки</entry>
       </row>
       <row>
        <entry>ACCESS SHARE</entry>
        <entry>ROW SHARE</entry>
        <entry>ROW EXCLUSIVE</entry>
        <entry>SHARE UPDATE EXCLUSIVE</entry>
        <entry>SHARE</entry>
        <entry>SHARE ROW EXCLUSIVE</entry>
        <entry>EXCLU&#8203;SIVE</entry>
        <entry>ACCESS EXCLUSIVE</entry>
        <entry>APPLICATION SHARE</entry>
        <entry>APPLICATION EXCLUSIVE</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>ACCESS SHARE</entry>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center"/>
        <entry align="center"/>
       </row>
       <row>
        <entry>ROW SHARE</entry>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center"/>
        <entry align="center"/>
       </row>
       <row>
        <entry>ROW EXCLUSIVE</entry>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center"/>
        <entry align="center"/>
       </row>
       <row>
        <entry>SHARE UPDATE EXCLUSIVE</entry>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center"/>
        <entry align="center"/>
       </row>
       <row>
        <entry>SHARE</entry>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center"/>
        <entry align="center"/>
       </row>
       <row>
        <entry>SHARE ROW EXCLUSIVE</entry>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center"/>
        <entry align="center"/>
       </row>
       <row>
        <entry>EXCLU&#8203;SIVE</entry>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center"/>
        <entry align="center"/>
       </row>
       <row>
        <entry>ACCESS EXCLUSIVE</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center"/>
        <entry align="center"/>
       </row>
       <row>
        <entry>APPLICATION SHARE</entry>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center">X</entry>
       </row>
       <row>
        <entry>APPLICATION EXCLUSIVE</entry>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </sect2>

   <sect2 id="locking-rows">
    <title>Блокировки на уровне строк</title>

    <para>В дополнение к блокировкам на уровне таблицы, существуют блокировки на уровне строк, перечисленные ниже с контекстами, где <productname>&productname;</productname> применяет их по умолчанию. Полный перечень конфликтов блокировок на уровне строк приведён в <xref remap="6" linkend="row-lock-compatibility"/>. Заметьте, что одна транзакция может владеть несколькими конфликтующими блокировками одной строки, даже в разных подтранзакциях; но две разных транзакции никогда не получат конфликтующие блокировки одной и той же строки. Блокировки на уровне строк блокируют только <emphasis>запись в определённые строки</emphasis>, но никак не влияют на выборку.</para>

     <variablelist>
      <title>Режимы блокировки на уровне строк</title>
      <varlistentry>
       <term>
        <literal>FOR UPDATE</literal>
       </term>
       <listitem>
        <para>В режиме <literal>FOR UPDATE</literal> строки, выданные оператором <command>SELECT</command>, блокируются как для изменения. При этом они защищаются от блокировки, изменения и удаления другими транзакциями до завершения текущей. То есть другие транзакции, пытающиеся выполнить <command>UPDATE</command>, <command>DELETE</command>, <command>SELECT FOR UPDATE</command>, <command>SELECT FOR NO KEY UPDATE</command>, <command>SELECT FOR SHARE</command> или <command>SELECT FOR KEY SHARE</command> с этими строками, будут заблокированы до завершения текущей транзакции; и наоборот, команда <command>SELECT FOR UPDATE</command> будет ожидать окончания параллельной транзакции, в которой выполнилась одна из этих команд с той же строкой, а затем установит блокировку и вернёт изменённую строку (или не вернёт, если она была удалена). Однако в транзакции <literal>REPEATABLE READ</literal> или <literal>SERIALIZABLE</literal> возникнет ошибка, если блокируемая строка изменилась с момента начала транзакции. Подробнее это обсуждается в <xref remap="6" linkend="applevel-consistency"/>.</para>
        <para>Режим блокировки <literal>FOR UPDATE</literal> также запрашивается на уровне строки любой командой <command>DELETE</command> и командой <command>UPDATE</command>, изменяющей значения определённых столбцов. В настоящее время блокировка с <command>UPDATE</command> касается столбцов, по которым создан уникальный индекс, применимый в качестве внешнего ключа (так что на частичные индексы и индексы выражений это не распространяется), но в будущем это может поменяться.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>FOR NO KEY UPDATE</literal>
       </term>
       <listitem>
        <para>Действует подобно <literal>FOR UPDATE</literal>, но запрашиваемая в этом режиме блокировка слабее: она не будет блокировать команды <literal>SELECT FOR KEY SHARE</literal>, пытающиеся получить блокировку тех же строк. Этот режим блокировки также запрашивается любой командой <command>UPDATE</command>, которая не требует блокировки <literal>FOR UPDATE</literal>.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>FOR SHARE</literal>
       </term>
       <listitem>
        <para>Действует подобно <literal>FOR NO KEY UPDATE</literal>, за исключением того, что для каждой из полученных строк запрашивается разделяемая, а не исключительная блокировка. Разделяемая блокировка не позволяет другим транзакциям выполнять с этими строками <command>UPDATE</command>, <command>DELETE</command>, <command>SELECT FOR UPDATE</command> или <command>SELECT FOR NO KEY UPDATE</command>, но допускает <command>SELECT FOR SHARE</command> и <command>SELECT FOR KEY SHARE</command>.</para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <literal>FOR KEY SHARE</literal>
       </term>
       <listitem>
        <para>Действует подобно <literal>FOR SHARE</literal>, но устанавливает более слабую блокировку: блокируется <literal>SELECT FOR UPDATE</literal>, но не <literal>SELECT FOR NO KEY UPDATE</literal>. Блокировка разделяемого ключа не позволяет другим транзакциям выполнять команды <command>DELETE</command> и <command>UPDATE</command>, только если они меняют значение ключа (но не другие <command>UPDATE</command>), и при этом допускает выполнение команд <command>SELECT FOR NO KEY UPDATE</command>, <command>SELECT FOR SHARE</command> и <command>SELECT FOR KEY SHARE</command>.</para>
       </listitem>
      </varlistentry>
     </variablelist>

    <para><productname>&productname;</productname> не держит информацию об изменённых строках в памяти, так что никаких ограничений на число блокируемых строк нет. Однако блокировка строки может повлечь запись на диск, например, если <command>SELECT FOR UPDATE</command> изменяет выбранные строки, чтобы заблокировать их, при этом происходит запись на диск.</para>

    <table tocentry="1" id="row-lock-compatibility">
     <title>Конфликтующие блокировки на уровне строк</title>
     <tgroup cols="5">
      <colspec colnum="2" colname="lockst"/>
      <colspec colnum="5" colname="lockend"/>
      <spanspec namest="lockst" nameend="lockend" spanname="lockreq"/>
      <thead>
       <row>
        <entry morerows="1">Запраши&#8203;ваемый режим блоки&#8203;ровки</entry>
        <entry spanname="lockreq">Текущий режим блокировки</entry>
       </row>
       <row>
        <entry>FOR KEY SHARE</entry>
        <entry>FOR SHARE</entry>
        <entry>FOR NO KEY UPDATE</entry>
        <entry>FOR UPDATE</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>FOR KEY SHARE</entry>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center">X</entry>
       </row>
       <row>
        <entry>FOR SHARE</entry>
        <entry align="center"/>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
       </row>
       <row>
        <entry>FOR NO KEY UPDATE</entry>
        <entry align="center"/>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
       </row>
       <row>
        <entry>FOR UPDATE</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
        <entry align="center">X</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </sect2>

   <sect2 id="locking-pages">
    <title>Блокировки на уровне страниц</title>

    <para>В дополнение к блокировкам на уровне таблицы и строк, для управления доступом к страницам таблиц в общих буферах используются блокировки на уровне страниц, исключительные и разделяемые. Эти блокировки освобождаются немедленно после выборки или изменения строк. Разработчикам приложений обычно можно не задумываться о блокировках страниц, здесь они упоминаются только для полноты картины.</para>

   </sect2>

   <sect2 id="locking-deadlocks">
    <title>Взаимоблокировки</title>

    <indexterm zone="locking-deadlocks"><primary>взаимоблокировка</primary></indexterm>

    <para>Частое применение явных блокировок может увеличить вероятность <firstterm>взаимоблокировок</firstterm>, то есть ситуаций, когда две (или более) транзакций держат блокировки так, что взаимно блокируют друг друга. Например, если транзакция 1 получает исключительную блокировку таблицы A, а затем пытается получить исключительную блокировку таблицы B, которую до этого получила транзакция 2, в данный момент требующая исключительную блокировку таблицы A, ни одна из транзакций не сможет продолжить работу. <productname>&productname;</productname> автоматически выявляет такие ситуации и разрешает их, прерывая одну из сцепившихся транзакций и тем самым позволяя другой (другим) продолжить работу. (Какая именно транзакция будет прервана, обычно сложно предсказать, так что рассчитывать на определённое поведение не следует.)</para>

    <para>Заметьте, что взаимоблокировки могут вызываться и блокировками на уровне строк (таким образом, они возможны, даже если не применяются явные блокировки). Рассмотрим случай, когда две параллельных транзакции изменяют таблицу. Первая транзакция выполняет: <screen>
UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 11111;
</screen> При этом она получает блокировку строки с указанным номером счёта. Затем вторая транзакция выполняет: <screen>
UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 22222;
UPDATE accounts SET balance = balance - 100.00 WHERE acctnum = 11111;
</screen> Первый оператор <command>UPDATE</command> успешно получает блокировку указанной строки и изменяет данные в ней. Однако второй оператор <command>UPDATE</command> обнаруживает, что строка, которую он пытается изменить, уже заблокирована, так что он ждёт завершения транзакции, получившей блокировку. Таким образом, вторая транзакция сможет продолжиться только после завершения первой. Теперь первая транзакция выполняет: <screen>
UPDATE accounts SET balance = balance - 100.00 WHERE acctnum = 22222;
</screen> Первая транзакция пытается получить блокировку заданной строки, но ей это не удаётся: эта блокировка уже принадлежит второй транзакции. Поэтому первой транзакции остаётся только ждать завершения второй. В результате первая транзакция блокируется второй, а вторая &mdash; первой: происходит взаимоблокировка. <productname>&productname;</productname> выявляет эту ситуацию и прерывает одну из транзакций.</para>

    <para>Обычно лучший способ предотвращения взаимоблокировок &mdash; добиться, чтобы все приложения, обращающиеся к базе данных, запрашивали блокировки нескольких объектов единообразно. В данном примере, если бы обе транзакции изменяли строки в одном порядке, взаимоблокировка бы не произошла. Блокировки в транзакции следует упорядочивать так, чтобы первой для какого-либо объекта запрашивалась наиболее ограничивающая из тех, которые для него потребуются. Если заранее обеспечить такой порядок нельзя, взаимоблокировки можно обработать по факту, повторяя прерванные транзакции.</para>

    <para>Если ситуация взаимоблокировки не будет выявлена, транзакция, ожидающая блокировки на уровне таблицы или строки, будет ждать её освобождения неограниченное время. Это означает, что приложения не должны оставлять транзакции открытыми долгое время (например, ожидая ввода пользователя).</para>
   </sect2>

   <sect2 id="advisory-locks">
    <title>Рекомендательные блокировки</title>

    <indexterm zone="advisory-locks"><primary>рекомендательная блокировка</primary></indexterm>

    <indexterm zone="advisory-locks"><primary>блокировка</primary> <secondary>рекомендательная</secondary></indexterm>

    <para><productname>&productname;</productname> также имеет средства создания блокировок, смысл которых определяют сами приложения. Такие блокировки называются <firstterm>рекомендательными</firstterm>, так как система не форсирует их использование &mdash; правильно их использовать должно само приложение. Рекомендательные блокировки бывают полезны для реализаций стратегий блокирования, плохо вписывающихся в модель MVCC. Например, рекомендательные блокировки часто применяются для исполнения стратегии пессимистичной блокировки, типичной для систем управления данными <quote>плоский файл</quote>. Хотя для этого можно использовать и дополнительные флаги в таблицах, рекомендательные блокировки работают быстрее, не нагружают таблицы и автоматически ликвидируется сервером в конце сеанса.</para>

    <para>В <productname>&productname;</productname> есть два варианта получить рекомендательные блокировки: на уровне сеанса и на уровне транзакции. Рекомендательная блокировка, полученная на уровне сеанса, удерживается, пока она не будет явно освобождена, или до конца сеанса. В отличие от стандартных рекомендательные блокировки уровня сеанса нарушают логику транзакций &mdash; блокировка, полученная в транзакции, даже если произойдёт откат этой транзакции, будет сохраняться в сеансе; аналогично, освобождение блокировки остаётся в силе, даже если транзакция, в которой оно было выполнено, позже прерывается. Вызывающий процесс может запросить блокировку несколько раз; при этом каждому запросу блокировки должен соответствовать запрос освобождения, чтобы она была действительно освобождена. Рекомендательные блокировки на уровне транзакций, напротив, во многом похожи на обычные блокировки: они автоматически освобождаются в конце транзакций и не требуют явного освобождения. Для кратковременного применения блокировок это поведение часто более уместно, чем поведение рекомендательных блокировок на уровне сеанса. Запросы рекомендательных блокировок одного идентификатора на уровне сеанса и на уровне транзакции будут блокировать друг друга вполне предсказуемым образом. Если сеанс уже владеет данной рекомендуемой блокировкой, дополнительные запросы её в том же сеансе будут всегда успешны, даже если её ожидают другие сеансы. Это утверждение справедливо вне зависимости от того, на каком уровне (сеанса или транзакции) установлены или запрашиваются новые блокировки.</para>

    <para>Как и остальные блокировки в <productname>&productname;</productname>, все рекомендательные блокировки, связанные с любыми сеансами, можно просмотреть в системном представлении <link linkend="view-pg-locks"><structname>pg_locks</structname></link>.</para>

    <para>И рекомендательные, и обычные блокировки сохраняются в области общей памяти, размер которой определяется параметрами конфигурации <xref linkend="guc-max-locks-per-transaction"/> и <xref linkend="guc-max-connections"/>. Важно, чтобы этой памяти было достаточно, так как в противном случае сервер не сможет выдать никакую блокировку. Таким образом, число рекомендуемых блокировок, которые может выдать сервер, ограничивается обычно десятками или сотнями тысяч в зависимости от конфигурации сервера.</para>

    <para>В определённых случаях при использовании рекомендательных блокировок, особенно в запросах с явными указаниями <literal>ORDER BY</literal> и <literal>LIMIT</literal>, важно учитывать, что получаемые блокировки могут зависеть от порядка вычисления SQL-выражений. Например: <screen>
SELECT pg_advisory_lock(id) FROM foo WHERE id = 12345; -- ok
SELECT pg_advisory_lock(id) FROM foo WHERE id &gt; 12345 LIMIT 100; -- опасно!
SELECT pg_advisory_lock(q.id) FROM
(
  SELECT id FROM foo WHERE id &gt; 12345 LIMIT 100
) q; -- ok
</screen> В этом примере второй вариант опасен, так как <literal>LIMIT</literal> не обязательно будет применяться перед вызовом функции блокировки. В результате приложение может получить блокировки, на которые оно не рассчитывает и которые оно не сможет освободить (до завершения сеанса). С точки зрения приложения такие блокировки окажутся в подвешенном состоянии, хотя они и будут отображаться в <structname>pg_locks</structname>.</para>

    <para>Функции, предназначенные для работы с рекомендательными блокировками, описаны в <xref remap="6" linkend="functions-advisory-locks"/>.</para>
   </sect2>

  </sect1>

  <sect1 id="applevel-consistency">
   <title>Проверки целостности данных на уровне приложения</title>

   <para>Используя транзакции Read Committed, очень сложно обеспечить целостность данных с точки зрения бизнес-логики, так как представление данных смещается с каждым оператором и даже один оператор может не ограничиваться своим снимком состояния в случае конфликта записи.</para>

   <para>Хотя транзакция Repeatable Read получает стабильное представление данных в процессе выполнения, с использованием снимков <acronym>MVCC</acronym> для проверки целостности данных всё же связаны тонкие моменты, включая так называемые <firstterm>конфликты чтения/записи</firstterm>. Если одна транзакция записывает данные, а другая в это же время пытается их прочитать (до или после записи), она не может увидеть результат работы первой. В таком случае создаётся впечатление, что читающая транзакция выполняется первой вне зависимости от того, какая из них была начата или зафиксирована раньше. Если этим всё и ограничивается, нет никаких проблем, но если читающая транзакция также пишет данные, которые читает параллельная транзакция, получается, что теперь эта транзакция будет исполняться, как будто она запущена перед другими вышеупомянутыми. Если же транзакция, которая должна исполняться как последняя, на самом деле зафиксирована первой, в графе упорядоченных транзакций легко может возникнуть цикл. И когда он возникает, проверки целостности не будут работать правильно без дополнительных мер.</para>

   <para>Как было сказано в <xref remap="6" linkend="xact-serializable"/>, сериализуемые транзакции представляют собой те же транзакции Repeatable Read, но дополненные неблокирующим механизмом отслеживания опасных условий конфликтов чтения/записи. Когда выявляется условие, приводящее к циклу в порядке транзакций, одна из этих транзакций откатывается и этот цикл таким образом разрывается.</para>

   <sect2 id="serializable-consistency">
    <title>Обеспечение согласованности в сериализуемых транзакциях</title>

    <para>Если для всех операций чтения и записи, нуждающихся в согласованном представлении данных, используются транзакции уровня изоляции Serializable, это обеспечивает необходимую согласованность без дополнительных усилий. Приложения из других окружений, применяющие сериализуемые транзакции для обеспечения целостности, в <productname>&productname;</productname> в этом смысле будут <quote>просто работать</quote>.</para>

    <para>Применение этого подхода избавляет программистов приложений от лишних сложностей, если приложение использует инфраструктуру, которая автоматически повторяет транзакции в случае отката из-за сбоев сериализации. Возможно, <literal>serializable</literal> стоит даже установить в качестве уровня изоляции по умолчанию (<literal>default_transaction_isolation</literal>). Также имеет смысл принять меры для предотвращения использования других уровней изоляции, непреднамеренного или с целью обойти проверки целостности, например проверять уровень изоляции в триггерах.</para>

    <para>Рекомендации по увеличению быстродействия приведены в <xref remap="6" linkend="xact-serializable"/>.</para>

    <warning>
     <para>Защита целостности с применением сериализуемых транзакций пока ещё не поддерживается в режиме горячего резерва (<xref linkend="hot-standby"/>). Поэтому там, где применяется горячий резерв, следует использовать уровень Repeatable Read и явные блокировки на главном сервере.</para>
    </warning>
   </sect2>

   <sect2 id="non-serializable-consistency">
    <title>Применение явных блокировок для обеспечения согласованности</title>

    <para>Когда возможны несериализуемые операции записи, для обеспечения целостности строк и защиты от одновременных изменений, следует использовать <command>SELECT FOR UPDATE</command>, <command>SELECT FOR SHARE</command> или соответствующий оператор <command>LOCK TABLE</command>. (<command>SELECT FOR UPDATE</command> и <command>SELECT FOR SHARE</command> защищают от параллельных изменений только возвращаемые строки, тогда как <command>LOCK TABLE</command> блокирует всю таблицу.) Это следует учитывать, перенося в <productname>&productname;</productname> приложения из других СУБД.</para>

    <para>Мигрируя в <productname>&productname;</productname> из других СУБД также следует учитывать, что команда <command>SELECT FOR UPDATE</command> сама по себе не гарантирует, что параллельная транзакция не изменит или не удалит выбранную строку. Для получения такой гарантии в <productname>&productname;</productname> нужно именно изменить эту строку, даже если никакие значения в ней менять не требуется. <command>SELECT FOR UPDATE</command> <emphasis>временно блокирует</emphasis> другие транзакции, не давая им получить ту же блокировку или выполнить команды <command>UPDATE</command> или <command>DELETE</command>, которые бы повлияли на заблокированную строку, но как только транзакция, владеющая этой блокировкой, фиксируется или откатывается, заблокированная транзакция сможет выполнить конфликтующую операцию, если только для данной строки действительно не был выполнен <command>UPDATE</command>, пока транзакция владела блокировкой.</para>

    <para>Реализация глобальной целостности с использованием несериализуемых транзакций <acronym>MVCC</acronym> требует более вдумчивого подхода. Например, банковскому приложению может потребоваться проверить, равняется ли сумма всех расходов в одной таблице сумме приходов в другой, при том, что обе таблицы активно изменяются. Просто сравнивать результаты двух успешных последовательных команд <literal>SELECT sum(...)</literal> в режиме Read Committed нельзя, так как вторая команда может захватить результаты транзакций, пропущенных первой. Подсчитывая суммы в одной транзакции Repeatable Read, можно получить точную картину только для транзакций, которые были зафиксированы до начала данной, но при этом может возникнуть законный вопрос &mdash; будет ли этот результат актуален тогда, когда он будет выдан. Если транзакция Repeatable Read сама вносит какие-то изменения, прежде чем проверять равенство сумм, полезность этой проверки становится ещё более сомнительной, так как при проверке будут учитываться некоторые, но не все изменения, произошедшие после начала транзакции. В таких случаях предусмотрительный разработчик может заблокировать все таблицы, задействованные в проверке, чтобы получить картину действительности, не вызывающую сомнений. Для этого применяется блокировка <literal>SHARE</literal> (или более строгая), которая гарантирует, что в заблокированной таблице не будет незафиксированных изменений, за исключением тех, что внесла текущая транзакция.</para>

    <para>Также заметьте, что, применяя явные блокировки для предотвращения параллельных операций записи, следует использовать либо режим Read Committed, либо в режиме Repeatable Read обязательно получать блокировки прежде, чем выполнять запросы. Блокировка, получаемая транзакцией Repeatable Read, гарантирует, что никакая другая транзакция, изменяющая таблицу, не выполняется, но если снимок состояния, полученный транзакцией, предшествует блокировке, он может не включать на данный момент уже зафиксированные изменения. Снимок состояния в транзакции Repeatable Read создаётся фактически на момент начала первой команды выборки или изменения данных (<literal>SELECT</literal>, <literal>INSERT</literal>, <literal>UPDATE</literal> или <literal>DELETE</literal>), так что получить явные блокировки можно до того, как он будет сформирован.</para>
   </sect2>
  </sect1>

  <sect1 id="mvcc-caveats">
   <title>Ограничения</title>

   <para>Некоторые команды DDL, в настоящее время это <xref linkend="sql-truncate"/> и формы <xref linkend="sql-altertable"/>, перезаписывающие таблицу, не являются безопасными с точки зрения MVCC. Это значит, что после фиксации усечения или перезаписи таблица окажется пустой для всех параллельных транзакций, если они работают со снимком, полученным перед фиксацией такой команды DDL. Это может проявиться только в транзакции, которая не обращалась к таблице до момента начала команды DDL &mdash; любая транзакция, которая обращалась к ней раньше, получила бы как минимум блокировку <literal>ACCESS SHARE</literal>, которая заблокировала бы эту команду DDL до завершения транзакции. Поэтому такие команды не приводят ни к каким видимым несоответствиям с содержимым таблицы при последовательных запросах к целевой таблице, хотя возможно видимое несоответствие между содержимым целевой таблицы и другими таблицами в базе данных.</para>

   <para>Поддержка уровня изоляции Serializable ещё не реализована для целевых серверов горячего резерва (они описываются в <xref remap="6" linkend="hot-standby"/>). На данный момент самый строгий уровень изоляции, поддерживаемый в режиме горячего резерва, это Repeatable Read. Хотя и тогда, когда главный сервер выполняет запись в транзакциях Serializable, все резервные серверы в итоге достигают согласованного состояния, но транзакция Repeatable Read на резервном сервере иногда может увидеть промежуточное состояние, не соответствующее результату последовательного выполнения транзакций на главном сервере.</para>
  </sect1>

  <sect1 id="locking-indexes">
   <title>Блокировки и индексы</title>

   <indexterm zone="locking-indexes"><primary>индексы</primary> <secondary>блокировки</secondary></indexterm>

   <para>Хотя <productname>&productname;</productname> обеспечивает неблокирующий доступ на чтение/запись к данным таблиц, для индексов в настоящий момент это поддерживается не в полной мере. <productname>&productname;</productname> управляет доступом к различным типам индексов следующим образом: <variablelist>
     <varlistentry>
      <term>Индексы типа B-дерево, <acronym>GiST</acronym> и <acronym>SP-GiST</acronym></term>
      <listitem>
       <para>Для управления чтением/записью используются кратковременные блокировки на уровне страницы, исключительные и разделяемые. Блокировки освобождаются сразу после извлечения или добавления строки индекса. Эти типы индексов обеспечивают максимальное распараллеливание операций, не допуская взаимоблокировок.</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Хеш-индексы</term>
      <listitem>
       <para>Для управления чтением/записью используются блокировки на уровне групп хеша. Блокировки освобождаются после обработки всей группы. Такие блокировки с точки зрения распараллеливания лучше, чем блокировки на уровне индекса, но не исключают взаимоблокировок, так как они сохраняются дольше, чем выполняется одна операция с индексом.</para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term>Индексы <acronym>GIN</acronym></term>
      <listitem>
       <para>Для управления чтением/записью используются кратковременные блокировки на уровне страницы, исключительные и разделяемые. Блокировки освобождаются сразу после извлечения или добавления строки индекса. Но заметьте, что добавление значения в поле с GIN-индексом обычно влечёт добавление нескольких ключей индекса, так что GIN может проделывать целый ряд операций для одного значения.</para>
      </listitem>
     </varlistentry>
    </variablelist></para>

   <para>В настоящее время в многопоточной среде наиболее производительны индексы-B-деревья; и так как они более функциональны, чем хеш-индексы, их рекомендуется использовать в такой среде для приложений, когда нужно индексировать скалярные данные. Если же нужно индексировать не скалярные данные, B-деревья не подходят, и вместо них следует использовать индексы GiST, SP-GiST или GIN.</para>
  </sect1>
 </chapter>
