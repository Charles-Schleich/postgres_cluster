<!-- doc/src/xml/geqo.xml -->

 <chapter id="geqo">
  <title>Генетический оптимизатор запросов</title>

  <para>
   <note>
    <title>Автор</title>
    <para>Разработал Мартин Утеш (<email>utesch@aut.tu-freiberg.de</email>) для Института автоматического управления в Техническом университете Фрайбергская горная академия, Германия.</para>
   </note>
  </para>

  <sect1 id="geqo-intro">
   <title>Обработка запроса как сложная задача оптимизации</title>

   <para>Среди всех реляционных операторов самым сложным для обработки и оптимизации является <firstterm>соединение</firstterm>. В первую очередь потому, что по мере увеличения числа соединений в запросе число возможных планов запроса увеличивается экспоненциально. Дополнительная сложность оптимизации связана с наличием различных <firstterm>методов соединения</firstterm> (например, в <productname>&productname;</productname> это вложенный цикл, соединение по хешу и соединение слиянием) для каждого отдельного соединения и разнообразием <firstterm>индексов</firstterm> (например, в <productname>&productname;</productname> это B-дерево, хеш, GiST и GIN), определяющих путь доступа к отношениям.</para>

   <para>Традиционный оптимизатор запросов <productname>&productname;</productname> выполняет <firstterm>почти исчерпывающий поиск</firstterm> во всём множестве возможных стратегий. Этот алгоритм, появившийся в СУБД IBM System R, находит порядок соединений, близкий к оптимальному, но может требовать огромного количества времени и памяти, когда число соединений оказывается большим. В результате обычный оптимизатор <productname>&productname;</productname> оказывается неподходящим для запросов, в которых соединяется большое количество таблиц.</para>

   <para>Институт автоматического управления в Техническом университете Фрайбергская горная академия, Германия, столкнулся с этими проблемами, разрабатывая систему принятия решений на основе базы знаний для обслуживания электростанций, в которой в качестве СУБД планировалось применять <productname>&productname;</productname>. Для машины, делающей выводы на основе базы знаний, СУБД должна была выполнять запросы с таким количеством соединений, что использование обычного оптимизатора запросов оказалось неприемлемым.</para>

   <para>Далее мы опишем реализацию <firstterm>генетического алгоритма</firstterm>, который решает проблему выбора порядка соединений эффективным способом для запросов с большим числом соединений.</para>
  </sect1>

  <sect1 id="geqo-intro2">
   <title>Генетические алгоритмы</title>

   <para>Генетический алгоритм (<acronym>ГА</acronym>) реализует метод эвристической оптимизации, построенный на случайном поиске. В данном контексте множество возможных решений проблемы оптимизации называется <firstterm>популяцией</firstterm> <firstterm>особей</firstterm>. Степень адаптации особи к среде определяет функция <firstterm>приспособленности</firstterm>.</para>

   <para>Координаты особи в пространстве поиска представляются <firstterm>хромосомами</firstterm>, которые по сути являются символьными строками. Фрагмент хромосомы, кодирующий значение одного оптимизируемого параметра, называется <firstterm>геном</firstterm>. Обычно ген кодируется в виде <firstterm>двоичного</firstterm> или <firstterm>целочисленного</firstterm> значения.</para>

   <para>В результате симуляции эволюционных операций (<firstterm>скрещивания</firstterm>, <firstterm>мутации</firstterm> и <firstterm>селекции</firstterm>) данный алгоритм формирует новые поколения особей, у которых приспособленность в среднем будет выше, чем у их предшественников.</para>

   <para>Как сказано в ответах на вопросы в группе <systemitem class="resource">comp.ai.genetic</systemitem>, нельзя не отметить, что <acronym>ГА</acronym> реализует не чисто случайный поиск решения проблемы. В <acronym>ГА</acronym> происходят вероятностные процессы, но результат явно оказывается не случайным (лучше случайного).</para>

   <figure id="geqo-diagram">
    <title>Диаграмма структуры генетического алгоритма</title>

    <informaltable frame="none">
     <tgroup cols="2">
      <tbody>
       <row>
        <entry>P(t)</entry>
        <entry>поколение предков на момент t</entry>
       </row>

       <row>
        <entry>P''(t)</entry>
        <entry>поколение потомков на момент t</entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

<literallayout class="monospaced">+=========================================+
|&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;  Алгоритм ГА  &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;|
+=========================================+
| ИНИЦИАЛИЗАЦИЯ t := 0                    |
+=========================================+
| ИНИЦИАЛИЗАЦИЯ P(t)                      |
+=========================================+
| вычислить ПРИСПОСОБЛЕННОСТЬ P(t)        |
+=========================================+
| пока не выполняется УСЛОВИЕ ОСТАНОВКИ   |
|   +-------------------------------------+
|   | P'(t)  := СКРЕЩИВАНИЕ{P(t)}         |
|   +-------------------------------------+
|   | P''(t) := МУТАЦИЯ{P'(t)}            |
|   +-------------------------------------+
|   | P(t+1) := СЕЛЕКЦИЯ{P''(t) + P(t)}   |
|   +-------------------------------------+
|   | вычислить ПРИСПОСОБЛЕННОСТЬ P''(t)  |
|   +-------------------------------------+
|   | t := t + 1                          |
+===+=====================================+</literallayout>
   </figure>
  </sect1>

  <sect1 id="geqo-pg-intro">
   <title>Генетическая оптимизация запросов (<acronym>GEQO</acronym>) в &productname;</title>

   <para>Модуль <acronym>GEQO</acronym> (Genetic Query Optimization, Генетическая оптимизация запросов) подходит к проблеме оптимизации запроса как к хорошо известной задаче коммивояжёра (<acronym>TSP</acronym>, Traveling Salesman Problem). Возможные планы запроса кодируются числами в строковом виде. Каждая строка представляет порядок соединения одного отношения из запроса со следующим. Например, дерево соединения <literallayout class="monospaced">
   /\
  /\ 2
 /\ 3
4  1
</literallayout>  кодируется строкой целых чисел '4-1-3-2', которая означает: сначала соединить отношения '4' и '1', потом добавить '3', а затем '2', где 1, 2, 3, 4 — идентификаторы отношений внутри оптимизатора <productname>&productname;</productname>.</para>

   <para>Реализация <acronym>GEQO</acronym> в <productname>&productname;</productname> имеет следующие особые характеристики: <itemizedlist spacing="compact" mark="bullet">
     <listitem>
      <para>Использование ГА с <firstterm>зафиксированным состоянием</firstterm> (когда заменяются наименее приспособленные особи популяции, а не всё поколение) способствует быстрой сходимости к улучшенным планам запроса. Это важно для обработки запроса за приемлемое время;</para>
     </listitem>

     <listitem>
      <para>Использование <firstterm>скрещивания с обменом рёбер</firstterm>, которое очень удачно минимизирует число потерянных рёбер при решении задачи коммивояжёра с применением <acronym>ГА</acronym>;</para>
     </listitem>

     <listitem>
      <para>Мутация как генетический оператор считается устаревшей, так что для получения допустимых путей <acronym>TSP</acronym> не требуются механизмы исправления.</para>
     </listitem>
    </itemizedlist></para>

   <para>Части модуля <acronym>GEQO</acronym> взяты из алгоритма Genitor, разработанного Д. Уитли.</para>

   <para>В результате, модуль <acronym>GEQO</acronym> позволяет оптимизатору запросов <productname>&productname;</productname> эффективно выполнять запросы со множеством соединений, обходясь без полного перебора вариантов.</para>

  <sect2>
   <title>Построение возможных планов с <acronym>GEQO</acronym></title>

   <para>В процедуре планирования в <acronym>GEQO</acronym> используется код стандартного планировщика, который строит планы сканирования отдельных отношений. Затем вырабатываются планы соединений с применением генетического подхода. Как было сказано выше, каждый план соединения представляется последовательностью чисел, определяющей порядок соединений базовых отношений. На начальной стадии код <acronym>GEQO</acronym> просто случайным образом генерирует несколько возможных последовательностей. Затем для каждой рассматриваемой последовательности вызывается функция стандартного планировщика, оценивающая стоимость запроса в случае выбора этого порядка соединений. (Для каждого шага последовательности рассматриваются все три возможные стратегии соединения и все изначально выбранные планы сканирования отношений. Результирующей оценкой стоимости будет минимальная из всех возможных.) Последовательности соединений с наименьшей оценкой стоимости считаются <quote>более приспособленными</quote>, чем последовательности с большей оценкой. Проанализировав возможные последовательности, генетический алгоритм отбрасывает наименее приспособленные из них. Затем генерируются новые кандидаты путём объединения генов более приспособленных последовательностей &mdash; для этого выбираются случайные фрагменты известных последовательностей с низкой стоимостью, из которых складываются новые последовательности для рассмотрения. Этот процесс повторяется, пока не будет рассмотрено некоторое предопределённое количество последовательностей соединений; после этого для построения окончательного плана выбирается лучшая последовательность, найденная за всё время поиска.</para>

   <para>Этот процесс по природе своей недетерминирован, вследствие случайного выбора при формировании начальной популяции и последующей <quote>мутации</quote> лучших кандидатов. Но во избежание неожиданных изменений выбранного плана, на каждом проходе алгоритм GEQO перезапускает свой генератор случайных чисел с текущим значением параметра <xref linkend="guc-geqo-seed"/>. Поэтому пока значение <varname>geqo_seed</varname> и другие параметры GEQO остаются неизменными, для определённого запроса (и других входных данных планировщика, в частности, статистики) будет строиться один и тот же план. Если вы хотите поэкспериментировать с разными путями соединений, попробуйте изменить <varname>geqo_seed</varname>.</para>

  </sect2>

  <sect2 id="geqo-future">
   <title>Будущее развитие модуля <productname>&productname;</productname> <acronym>GEQO</acronym></title>

     <para>Требуется провести дополнительную работу для выбора оптимальных параметров генетического алгоритма. В файле <filename>src/backend/optimizer/geqo/geqo_main.c</filename>, подпрограммах <function>gimme_pool_size</function> и <function>gimme_number_generations</function>, мы должны найти компромиссные значения параметров, удовлетворяющие двум несовместимым требованиям: <itemizedlist spacing="compact">
       <listitem>
        <para>Оптимальность плана запроса</para>
       </listitem>
       <listitem>
        <para>Время вычисления</para>
       </listitem>
      </itemizedlist></para>

     <para>В текущей реализации приспособленность каждой рассматриваемой последовательности соединений рассчитывается стандартным планировщиком, который каждый раз вычисляет избирательность соединения и стоимость заново. С учётом того, что различные кандидаты могут содержать общие подпоследовательности соединений, при этом будет повторяться большой объём работы. Таким образом, расчёт можно значительно ускорить, сохраняя оценки стоимости для внутренних соединений, но сложность состоит в том, чтобы уместить это состояние в разумные объёмы памяти.</para>

     <para>На более общем уровне не вполне понятно, насколько уместно для оптимизации запросов использовать ГА, предназначенный для решения задачи коммивояжёра. В этой задаче стоимость, связанная с любой подстрокой (частью тура) не зависит от остального маршрута, но это определённо не так для оптимизации запросов. Таким образом, возникает вопрос, насколько эффективно скрещивание путём обмена рёбрами.</para>

   </sect2>
  </sect1>

 <sect1 id="geqo-biblio">
  <title>Дополнительные источники информации</title>

  <para>Дополнительную информацию о генетических алгоритмах можно получить в следующих источниках: <itemizedlist>
    <listitem>
     <para><ulink url="http://www.aip.de/~ast/EvolCompFAQ/"> The Hitch-Hiker's Guide to Evolutionary Computation</ulink>, (Руководство для путешествующих автостопом по эволюционным вычислениям, Ответы на часто задаваемые вопросы в группе <ulink url="news://comp.ai.genetic"/>)</para>
    </listitem>

    <listitem>
     <para><ulink url="http://www.red3d.com/cwr/evolve.html">Evolutionary Computation and its application to art and design</ulink> (Эволюционные вычисления и их применение в искусстве и дизайне), Крейг Рейнольдс</para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="elma04"/>
     </para>
    </listitem>

    <listitem>
     <para>
      <xref linkend="fong"/>
     </para>
    </listitem>
   </itemizedlist></para>

 </sect1>
</chapter>
