<sect1 id="plantuner">
  <title>plantuner</title>
  <para>
    The <literal>plantuner</literal> module provides hits for planner,
    which can disable or enable indexes for query execution.
  </para>

  <sect2 id="plantuner-motivation">
    <title>Motivation</title>
    <para>
      Whether somebody think it's bad or not, but sometime it's very
      interesting to be able to control planner (provide hints, which tell
      optimizer to ignore its algorithm in part), which is currently
      impossible in &productname; (and PostgreSQL).
      Oracle, for example, has over 120 hints,
      and Microsoft SQL Server also supports hints.
    </para>
    <para>
      This first version of plantuner provides a possibility to hide
      specified indexes from &productname; planner, so it will not use them.
    </para>
    <para>
      There are many situations when developer want to temporarily disable
      specific index(es), without dropping them, or to instruct planner to
      use specific index.
    </para>
    <para>
      Next, for some workload &productname; could be too pessimistic for
      newly created tables and assumes much more rows in table than
      it actually has. If plantuner.fix_empty_table GUC variable is set
      to true then module will set to zero the number of pages/tuples of
      table which hasn't blocks in a file.
    </para>
  </sect2>

  <sect2 id="plantuner-syntax">
    <title>Syntax</title>
    <para>plantuner.disable_index &mdash; List of indexes invisible to planner</para>
    <para>plantuner.enable_index &mdash; List of indexes visible to planner even they are hidden by plantuner.disable_index.</para>
  </sect2>

  <sect2 id="plantuner-usage-example">
    <title>Example</title>
    <para>
      To enable the module you can either load shared library 'plantuner' in
      psql session or specify 'shared_preload_libraries' option in
      postgresql.conf.
      <programlisting>
=# LOAD 'plantuner';
=# create table test(id int);
=# create index id_idx on test(id);
=# create index id_idx2 on test(id);
=# \d test
     Table "public.test"
 Column |  Type   | Modifiers
--------+---------+-----------
 id     | integer |
Indexes:
    "id_idx" btree (id)
    "id_idx2" btree (id)
=# explain select id from test where id=1;
                              QUERY PLAN
-----------------------------------------------------------------------
 Bitmap Heap Scan on test  (cost=4.34..15.03 rows=12 width=4)
   Recheck Cond: (id = 1)
   ->  Bitmap Index Scan on id_idx2  (cost=0.00..4.34 rows=12 width=0)
         Index Cond: (id = 1)
(4 rows)
=# set enable_seqscan=off;
=# set plantuner.disable_index='id_idx2';
=# explain select id from test where id=1;
                              QUERY PLAN
----------------------------------------------------------------------
 Bitmap Heap Scan on test  (cost=4.34..15.03 rows=12 width=4)
   Recheck Cond: (id = 1)
   ->  Bitmap Index Scan on id_idx  (cost=0.00..4.34 rows=12 width=0)
         Index Cond: (id = 1)
(4 rows)
=# set plantuner.disable_index='id_idx2,id_idx';
=# explain select id from test where id=1;
                               QUERY PLAN
-------------------------------------------------------------------------
 Seq Scan on test  (cost=10000000000.00..10000000040.00 rows=12 width=4)
   Filter: (id = 1)
(2 rows)
=# set plantuner.enable_index='id_idx';
=# explain select id from test where id=1;
                              QUERY PLAN
-----------------------------------------------------------------------
 Bitmap Heap Scan on test  (cost=4.34..15.03 rows=12 width=4)
   Recheck Cond: (id = 1)
   ->  Bitmap Index Scan on id_idx  (cost=0.00..4.34 rows=12 width=0)
         Index Cond: (id = 1)
(4 rows)
      </programlisting>
    </para>
  </sect2>

  <sect2 id="plantuner-authors">
    <title>Authors</title>
    <para>All work was done by Teodor Sigaev (teodor@sigaev.ru) and Oleg Bartunov (oleg@sai.msu.su).</para>
    <para>The work sponsored by Nomao project (http://www.nomao.com).</para>
  </sect2>

</sect1>

