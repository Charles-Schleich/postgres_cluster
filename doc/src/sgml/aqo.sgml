<!-- doc/src/sgml/aqo.sgml -->

<sect1 id="aqo">
  <title>aqo (Adaptive Query Optimization)</title>

  <indexterm zone="aqo">
   <primary>aqo</primary>
  </indexterm>

  <para>
    The <filename>aqo</filename> module is a <productname>&productname;</productname> extension for cost-based query
    optimization. Using machine learning methods, more precisely, a modification of the
    k-NN algorithm, <filename>aqo</filename> improves cardinality estimation, which can improve execution plans and, consequently, speed up query execution. 
  </para>
  <para>
    With <filename>aqo</filename>, you can: 
  </para>
  <itemizedlist spacing="compact">
    <listitem>
      <para>
        Automatically tune your database for the most typical database queries
      </para>
    </listitem>
    <listitem>
      <para>    
        Experiment with execution plans for complex queries
      </para>
    </listitem>
  </itemizedlist>
  <para>In the learning modes, <filename>aqo</filename> collects statistics on all the executed
    queries and classifies it according to the query type. If the
    queries differ in their constants only, they belong to the same
    type. For each type, <filename>aqo</filename> stores the cardinality quality, planning
    time, execution time, and execution statistics for machine learning. Based on this data, <filename>aqo</filename> builds the new query plan and uses it for the next query of the same type.
    Experimental evaluation shows that <filename>aqo</filename> can significantly improve
    performance for complex queries.
  </para>
  <sect2 id="aqo-installation">
    <title>Installation</title>
    <para>
      <emphasis role="strong">Prerequisites:</emphasis> You must have <productname>&productname;</productname> installed to
      use the <filename>aqo</filename> extension.
    </para>
    <para>
      To complete the installation of <filename>aqo</filename>:
    </para>
    <orderedlist>
      <listitem>
        <para>
          When setting up your server, add <filename>aqo.so</filename> to the
          <varname>shared_preload_libraries</varname> variable in the
          <filename>postgresql.conf</filename> file:
        </para>
        <programlisting>
shared_preload_libraries = 'aqo'
</programlisting>
        <para>
          You should preload the `aqo` library at the server startup, since
 adaptive query optimization needs to be enabled per database, not per connection. Otherwise, all the collected statistics will be lost when the session ends.
        </para>
      </listitem>
      <listitem>
        <para>
          From the command line, run the following query:
        </para>
        <programlisting>
$ psql -d <replaceable>dbname</replaceable> -c &quot;CREATE EXTENSION aqo;&quot;
</programlisting>
      </listitem>
    </orderedlist>
    <para>
      where <replaceable>dbname</replaceable> is the name of the database for
      which you would like to use <filename>aqo</filename>. Once the extension is created,
      you can start optimizing queries.
    </para>
    <para>
      To stop using <filename>aqo</filename> for query optimization, run:
    </para>
    <programlisting>
DROP EXTENSION aqo;
</programlisting>
  </sect2>
  <sect2 id="aqo-usage">
    <title>Usage</title>
    <sect3 id="aqo-choosing-query-optimization-modes">
      <title>Choosing Query Optimization Modes</title>
      <para>
        By default, <filename>aqo</filename> does not affect query performance. To enable
        optimization modes for your database, add the
        <varname>aqo.mode</varname> variable to your
        <filename>postgresql.conf</filename> file and reload the cluster.
        Depending on your database usage model, you can choose between
        the following modes:
      </para> 
      <indexterm>
       <primary><varname>aqo.mode</> configuration parameter</primary>
      </indexterm>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
          <literal>aqo.mode = 'intelligent'</literal> - this
        mode auto-tunes your queries based on statistics collected per
        query type.
          </para>
        </listitem>
        <listitem>
          <para>       
         <literal>aqo.mode = 'forced'</literal> -
        this mode tries to optimize all queries together, regardless of
        the query type.
          </para>
        </listitem>        
        <listitem>
          <para>        
          <literal>aqo.mode = 'manual'</literal> - this mode
        uses the default planner for all new queries, but can reuse the
        collected statistics for already known query types, if any.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        To dynamically change the <filename>aqo</filename> settings in your current session,
        run the following command:
      <programlisting>
SET aqo.mode = <replaceable>'mode'</>;
</programlisting>
where <replaceable>mode</> is the name of the optimization mode to use.
</para>
      <blockquote>
        <para>
          <emphasis role="strong">Important:</emphasis> The <filename>aqo</filename>
          extension will not work well for queries with dynamically
          generated views. If such queries appear in your workload,
          reset the optimization mode to <literal>aqo.mode='manual'</literal>.
        </para>
      </blockquote>
      <para>
        If you often run queries of the same type and some query types takes too long because of non-optimal query execution plans, you can use the intelligent mode to
        improve planning for such queries. In the intelligent mode, <filename>aqo</filename>
        analyzes previous query execution and stores statistics. Statistics on queries of
        different types is stored separately. If performance is not
        improved after 50 iterations, the <filename>aqo</filename> extension falls back to
        the default query planner.
      </para>
      <blockquote>
        <para>
          <emphasis role="strong">Note:</emphasis> You can view the
          current query plan using the standard PostgreSQL <command>EXPLAIN</> command with the 
          <command>ANALYZE</> option. For details, see the <link linkend="using-explain">Using EXPLAIN</link> section.
        </para>
      </blockquote>
      <para>
        Since the intelligent mode tries to learn separately for
        different query types, <filename>aqo</filename> may fail to optimize queries with
        dynamic structure. For such cases, reset the <filename>aqo</filename> extension to
        the manual mode, or try using the forced mode.
      </para>
      <para>
        In the <literal>forced</literal> mode, <filename>aqo</filename> ignores different
        query types and tries to optimize them together. This mode can
        help you optimize workloads with dynamically generated query
        structures, and it consumes less memory than the intelligent
        mode. However, since the <literal>forced</literal> mode lacks
        intelligent tuning, performance may decrease for some queries.
        If you see performance issues in this mode, switch <filename>aqo</filename> to the
        manual mode.
      </para>
      <para>
        When you have reached the required optimization level in the intelligent mode, you can stop performance tuning by switching <filename>aqo</filename> to the manual mode:
      </para>
      <programlisting>
SET aqo.mode = 'manual';
</programlisting>
      <para>
        In the manual mode, <filename>aqo</filename> does not collect statistics for new
        query types, so they will not be optimized. For known query
        types, <filename>aqo</filename> will continue using the optimized planning
        algorithms.
      </para>
    </sect3>
    <sect3 id="aqo-advanced-query-tuning">
    <title>Advanced Query Tuning</title>
    <blockquote>
      <para>
        You must have superuser rights to access <filename>aqo</filename> tables and
        configure advanced query settings.
      </para>
    </blockquote>
    <para>
      When run in the intelligent mode, <filename>aqo</filename> assigns a unique hash value
      to each query type to separate the collected statistics. If you
      switch to the forced mode, the statistics for all untracked query
      types is stored in common query type with hash 0. You can view all
      the processed query types and their corresponding hash values in
      the <literal>aqo_query_texts</literal> table:
    </para>
    <programlisting>
SELECT * FROM aqo_query_texts;
</programlisting>
    <para>
      Each query type has its own optimization settings. To review the
      current settings for each type, view the
      <literal>aqo_queries</literal> table:
    </para>
    <programlisting>
SELECT * FROM aqo_queries;
</programlisting>
    <para>
      For each query type, the following settings are available:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>query_hash</literal> stores the hash value that
          uniquely identifies the query type.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>learn_aqo</literal> enables statistics collection for
          this query type.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>use_aqo</literal> enables <filename>aqo</filename> cardinality prediction
          for the next execution of this query type.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>fspace_hash</literal> is a unique identifier of the
          separate space in which the data for this query type is
          collected. By default, <literal>fspace_hash</literal> is equal
          to <literal>query_hash</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>auto_tuning</literal> shows whether
          <filename>aqo</filename> tries to tune other settings for the
          given query. By default, auto-tuning in enabled in the
          intelligent mode.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      You can manually change these settings to adjust optimization
      for a particular query type. For example:
    </para>
    <programlisting>
 -- Add a new query type into the aqo_queries table:

SET aqo.mode='intelligent';
SELECT * FROM a, b WHERE a.id=b.id;
SET aqo.mode='manual';

 -- Disable auto_tuning, enable both learn_aqo and use_aqo for this query type:

UPDATE aqo_queries SET use_aqo=true, learn_aqo=true, auto_tuning=false 
  WHERE query_hash = (SELECT query_hash from aqo_query_texts 
  WHERE query_text LIKE 'SELECT * FROM a, b WHERE a.id=b.id;');

 -- Run EXPLAIN ANALYZE until the plan changes:

EXPLAIN ANALYZE SELECT * FROM a, b WHERE a.id=b.id;
EXPLAIN ANALYZE SELECT * FROM a, b WHERE a.id=b.id;

 -- Disable learning to stop statistics collection and use the optimized plan:

UPDATE aqo_queries SET learn_aqo=false 
  WHERE query_hash = (SELECT query_hash from aqo_query_texts 
  WHERE query_text LIKE 'SELECT * FROM a, b WHERE a.id=b.id;');
</programlisting>

    <para>
      If your data or query distribution is rapidly changing, obsolete statistics may affect AQO performance. After a while, <filename>aqo</filename> will learn the new statistics, but it may take longer than expected. To speed up learning, reset the
      statistics. To remove all the collected machine learning
      statistics, run the following command:
    </para>
    <programlisting>
DELETE FROM aqo_data;
</programlisting>
    <para>
      Alternatively, you can specify a particular query type to reset by
      providing its hash value in the <literal>fspase_hash</literal> option. For example:
    </para>
    <programlisting>
DELETE FROM aqo_data WHERE fspace_hash = (SELECT fspace_hash FROM aqo_queries 
  WHERE query_hash = (SELECT query_hash from aqo_query_texts 
  WHERE query_text LIKE 'SELECT * FROM a, b WHERE a.id=b.id;'));
</programlisting>
  
    <para>
      To stop intelligent tuning for a particular query type, disable the <literal>auto_tuning</literal> setting:
    <programlisting>
 UPDATE aqo_queries SET auto_tuning=false WHERE query_hash = '<replaceable>hash</>';
</programlisting>
    where <replaceable>hash</> is the hash value for this query type. As a result, <filename>aqo</filename> disables automatic changing of the <literal>learn_aqo</literal> and <literal>use_aqo</literal> settings.
    </para>
    
    <para>
      To disable further learning for a particular query type, use the
      following command:
    <programlisting>
 UPDATE aqo_queries SET learn_aqo=false WHERE query_hash = '<replaceable>hash</>';
</programlisting>
    where <replaceable>hash</> is the hash value for this query type.
    </para>

    <para>
      To fully disable <filename>aqo</filename> for all queries and use the default <productname>PostgreSQL</>
      query planner, run:
    </para>
    <programlisting>
UPDATE aqo_queries SET use_aqo=false, learn_aqo=false, auto_tuning=false;
</programlisting>
    </sect3>
  </sect2>
    <sect2 id="aqo-reference">
    <title>Reference</title>
      <sect3 id="aqo-variables">
      <title>Configuration Variables</title>
        <sect4 id="aqo-mode">
        <title>aqo.mode</title>
        <para>Defines the <filename>aqo</filename> optimization modes. 
        </para>
        
 <table id="aqo-mode-options">
  <title>aqo.mode Options</title>
  <tgroup cols="2">
   <thead>
    <row><entry>Option</entry> <entry>Description</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry><literal>intelligent</literal></entry>
     <entry>Auto-tunes your queries based on statistics collected per query type.</entry>
     
    </row>
    <row>
     <entry><literal>forced</literal></entry>
     <entry>Optimizes all queries together, regardless of the query type.</entry>
    </row>
    <row>
     <entry><literal>manual</literal></entry>
     <entry><emphasis role="strong">Default.</emphasis> Uses the default planner for all new queries, but can reuse the collected statistics for already known query types, if any.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
        </sect4>

  
    </sect3>
    <sect3 id="aqo-tables">
      <title>Tables</title>
      <sect4 id="aqo-query-texts-table">
        <title>aqo_query_texts Table</title>
        <para>
          The <literal>aqo_query_texts</literal> table classifies all
          the query types processed by <filename>aqo</filename>. 
        </para>
         <table id="aqo-query-texts-ref">
         <title>aqo_query_texts Table</title>
  <tgroup cols="2">
   <thead>
    <row><entry>Column Name</entry> <entry>Description</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry><literal>query_hash</literal></entry>
     <entry>Stores the hash value that uniquely identifies the query type.</entry>  
    </row>
    <row>
     <entry><literal>query_text</literal></entry>
     <entry>Provides a sample query of
              the given type.</entry>
    </row>

   </tbody>
  </tgroup>
 </table>
      </sect4>
      <sect4 id="aqo-queries-table">
        <title>aqo_queries Table</title>
        <para>
          The <literal>aqo_queries</literal> table stores optimization
          settings for different query types.
        </para>

 <table id="aqo-queries-table-ref">
 <title>aqo_queries Table</title>
  <tgroup cols="2">
   <thead>
    <row><entry>Setting</entry><entry>Description</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry><literal>query_hash</literal></entry>
     <entry>Stores the hash value that uniquely identifies the query type.</entry>
     
    </row>
    <row>
     <entry><literal>learn_aqo</literal></entry>
     <entry>Enables statistics collection
              for this query type.</entry>
    </row>
    <row>
     <entry><literal>use_aqo</literal></entry>
     <entry>Enables <filename>aqo</filename> cardinality
              prediction for the next execution of this query type. If
              cost estimation model is incomplete, this may slow down
              query execution.</entry>
    </row>
    <row>
     <entry><literal>fspace_hash</literal></entry>
     <entry>Provides a unique identifier of
              the separate space in which the data for this query type
              is collected. By default, <literal>fspace_hash</literal>
              is equal to <literal>query_hash</literal>. Using this
              setting, you can manually change the optimization model
              used for a particular query type. It may decrease the
              amount of memory for models and even improve query
              execution performance. However, changing this setting may
              cause unexpected <filename>aqo</filename> behavior, so make sure to use it only
              if you know what you are doing.</entry>
    </row>
    <row>
     <entry><literal>auto_tuning</literal></entry>
     <entry>Shows whether
              <filename>aqo</filename> tries to tune other settings for
              the given query. By default, auto-tuning in enabled in the
              intelligent mode. In other modes, new queries are not
              appended to <literal>aqo_queries</literal> automatically.
              You can change this behavior by setting the
              <literal>auto_tuning</literal> variable to TRUE.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
      </sect4>
      <sect4 id="aqo-data-table">
        <title>aqo_data Table</title>
        <para>
          The <literal>aqo_data</literal> table contains machine
          learning data for cardinality estimation refinement. To forget
          all the collected statistics for a particular query type, you
          can delete all rows from aqo_data with the corresponding
          <literal>fspace_hash</literal>.
        </para>
      </sect4>
      <sect4 id="aqo-query-stat-table">
        <title>aqo_query_stat Table</title>
        <para>
          The <literal>aqo_query_stat</literal> table stores statistics
          about query execution, by query type:
        </para>
        <itemizedlist  spacing="compact">
          <listitem>
            <para>
              execution time
            </para>
          </listitem>
          <listitem>
            <para>
              planning time
            </para>
          </listitem>
          <listitem>
            <para>
              cardinality estimation error in the selected query plans
            </para>
          </listitem>
        </itemizedlist>
        <para>
          The <filename>aqo</filename> extension uses this data when the
          <literal>auto_tuning</literal> option is enabled for a
          particular query type.
        </para>
      </sect4>
    </sect3>
  </sect2>
  <sect2 id="aqo-authors">
    <title>Authors</title>
    <para>
    Oleg Ivanov <email>o.ivanov@postgrespro.ru</email>,
    Postgres Professional, Moscow, Russia
    </para>
  </sect2>
</sect1>
