<!-- doc/src/sgml/aqo.sgml -->

<sect1 id="aqo">
  <title>aqo</title>

  <indexterm zone="aqo">
   <primary>aqo</primary>
  </indexterm>

  <para>
    The <filename>aqo</filename> module is a <productname>&productname;</productname> extension for cost-based query
    optimization. Using machine learning methods, more precisely, a modification of the
    k-NN algorithm, <filename>aqo</filename> improves cardinality estimation, which can optimize execution plans and, consequently, speed up query execution.
  </para>
  <para>The <filename>aqo</filename> module can collect statistics on all the executed
    queries, excluding the queries that access system relations. 
    The collected statistics is classified by query type. If the
    queries differ in their constants only, they belong to the same
    type. For each type, <filename>aqo</filename> stores the cardinality quality, planning
    time, execution time, and execution statistics for machine learning. Based on this data, <filename>aqo</filename> builds a new query plan and uses it for the next query of the same type.
    <filename>aqo</filename> test runs have shown significant performance improvements for complex queries.
  </para>
  <sect2 id="aqo-installation">
    <title>Installation and Setup</title>
    <para>
      The <filename>aqo</filename> extension is included into the <productname>&productname;</productname>. Once you have <productname>&productname;</productname> installed, complete the following steps to enable <filename>aqo</filename>:
    </para>
    <orderedlist>
      <listitem>
        <para>
          When setting up your server, add <filename>aqo</filename> to the
          <varname>shared_preload_libraries</varname> variable in the
          <filename>postgresql.conf</filename> file:
        </para>
        <programlisting>
shared_preload_libraries = 'aqo'
</programlisting>
        <para>
          The <literal>aqo</literal> library must be preloaded at the server startup, since
 adaptive query optimization needs to be enabled per cluster. Otherwise, <filename>aqo</filename> will only be used for the session in which you created the <filename>aqo</filename> extension.
        </para>
      </listitem>
      <listitem>
        <para>
          Create the <filename>aqo</filename> extension using the following query:
        </para>
        <programlisting>
CREATE EXTENSION aqo;
</programlisting>
      </listitem>
    </orderedlist>
    <para>
      Once the extension is created, you can start optimizing queries.
    </para>
    <para>
      To disable <filename>aqo</filename> at the cluster level and remove all the collected statistics, run:
    </para>
    <programlisting>
DROP EXTENSION aqo;
</programlisting>

<sect3 id="aqo-configuration">
      <title>Configuration</title>
      <para>
        By default, <filename>aqo</filename> does not affect query performance. To enable
        adaptive query optimization for your database, add the
        <varname>aqo.mode</varname> variable to your
        <filename>postgresql.conf</filename> file and reload the cluster.
        Depending on your database usage model, you can choose between
        the following modes:
      </para> 
      <indexterm>
       <primary><varname>aqo.mode</> configuration parameter</primary>
      </indexterm>
      <itemizedlist spacing="compact">
        <listitem>
          <para>
           <literal>intelligent</literal> &mdash; this
        mode auto-tunes your queries based on statistics collected per
        query type.
          </para>
        </listitem>
        <listitem>
          <para>
         <literal>forced</literal> &mdash;  
        this mode tries to optimize all queries together, regardless of
        the query type.
          </para>
        </listitem>
        <listitem>
          <para>
          <literal>controlled</literal> &mdash; this mode
        uses the default planner for all new queries, but continues collecting
        statistics for already known query types, if any.
          </para>
        </listitem>
        <listitem>
          <para>
          <literal>disabled</literal> &mdash; this mode
        disables <filename>aqo</filename> for all queries, even for the known query types.
        You can use this mode to temporarily disable <filename>aqo</filename> without losing 
        the collected statistics and configuration.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        To dynamically change the <filename>aqo</filename> settings in your current session,
        run the following command:
      <programlisting>
SET aqo.mode = '<replaceable>mode</>';
</programlisting>
where <replaceable>mode</> is the name of the optimization mode to use.
</para>
          <important><para>The intelligent mode of <filename>aqo</filename>
          may not work well if the queries in your workload are of multiple 
          different types. In this case, you can try resetting the optimization mode to <literal>controlled</literal>.</para>
        </important>
      </sect3>
  </sect2>
  <sect2 id="aqo-usage">
    <title>Usage</title>
    <sect3 id="aqo-choosing-query-optimization-modes">
      <title>Choosing Query Optimization Modes</title>
      <para>
        If you often run queries of the same type, for example, your application limits the number 
        of possible query types, you can use the <literal>intelligent</literal> mode to
        improve planning for these queries. In this mode, <filename>aqo</filename>
        analyzes each query execution and stores statistics. Statistics on queries of
        different types is stored separately. If performance is not
        improved after 50 iterations, the <filename>aqo</filename> extension falls back to
        the default query planner.
      </para>
      <note><para>
          You can view the
          current query plan using the standard <productname>&productname;</productname> <command>EXPLAIN</> command with the 
          <command>ANALYZE</> option. For details, see the <xref linkend="using-explain">.</para>
        </note>
      <para>
        Since the <literal>intelligent</literal> mode tries to learn separately for
        different query types, <filename>aqo</filename> may fail to provide peformance improvements if the types of the queries in the workload are constantly changing. For such dynamic workloads, reset the <filename>aqo</filename> extension to
        the <literal>controlled</literal> mode, or try using the <literal>forced</literal> mode.
      </para>
      <para>
        In the <literal>forced</literal> mode, <filename>aqo</filename> 
        does not classify the collected statistics by query types and tries to optimize all queries together. This mode can
        help you optimize workloads with multiple different query
        types, and it consumes less memory than the intelligent
        mode. However, since the <literal>forced</literal> mode lacks
        intelligent tuning, performance may decrease for some queries.
        If you see performance issues in this mode, switch <filename>aqo</filename> to the
        <literal>controlled</literal> mode:
      </para>
      <programlisting>
SET aqo.mode = 'controlled';
</programlisting>
      <para>
        In the <literal>controlled</literal> mode, <filename>aqo</filename> does not collect statistics for new
        query types, so they will not be optimized. For known query
        types, <filename>aqo</filename> will continue collecting statistics and using optimized planning
        algorithms.
      </para>
      <para>If you want to fully disable <filename>aqo</filename>, you can switch <filename>aqo</filename> to the <literal>disabled</literal> mode. In this case, the default planner is used for all queries, but the collected statistics and <filename>aqo</filename> settings are saved and can be used in the future.</para>
    </sect3>
    <sect3 id="aqo-advanced-query-tuning">
    <title>Fine-Tuning aqo</title>
    <para>
        You must have superuser rights to access <filename>aqo</filename> tables and
        configure advanced query settings.
      </para>
      <para>
      When run in the <literal>intelligent</literal> mode, <filename>aqo</filename> assigns a unique hash value
      to each query type to separate the collected statistics. If you
      switch to the <literal>forced</literal> mode, the statistics for all untracked query
      types is stored in a common query type with hash 0. You can view all
      the processed query types and their corresponding hash values in
      the <structname>aqo_query_texts</structname> table:
    </para>
    <programlisting>
SELECT * FROM aqo_query_texts;
</programlisting>
    <para>
      Each query type has its own optimization settings. These settings are stored in the <structname>aqo_queries</structname> table:
    </para>
    <programlisting>
SELECT * FROM aqo_queries;
</programlisting>
    <para>
      For each query type, the following settings are available:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>query_hash</literal> stores the hash value that
          uniquely identifies the query type.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>learn_aqo</literal> enables statistics collection for
          this query type.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>use_aqo</literal> enables <filename>aqo</filename> cardinality prediction
          for the next execution of this query type.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>fspace_hash</literal> is a unique identifier of the
          separate space in which the statistics for this query type is
          collected. By default, <literal>fspace_hash</literal> is equal
          to <literal>query_hash</literal>.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>auto_tuning</literal> shows whether
          <filename>aqo</filename> tries to change other settings for the
          given query. By default, auto-tuning is enabled in the
          <literal>intelligent</literal> mode.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      You can manually change these settings to adjust optimization
      for a particular query type. For example:
    </para>
    <programlisting>
 -- Add a new query type into the aqo_queries table:

SET aqo.mode='intelligent';
SELECT * FROM a, b WHERE a.id=b.id;
SET aqo.mode='controlled';

 -- Disable auto_tuning, enable both learn_aqo and use_aqo 
 -- for this query type:

UPDATE aqo_queries SET use_aqo=true, learn_aqo=true, auto_tuning=false 
  WHERE query_hash = (SELECT query_hash from aqo_query_texts 
  WHERE query_text LIKE 'SELECT * FROM a, b WHERE a.id=b.id;');

 -- Run EXPLAIN ANALYZE until the plan changes:

EXPLAIN ANALYZE SELECT * FROM a, b WHERE a.id=b.id;
EXPLAIN ANALYZE SELECT * FROM a, b WHERE a.id=b.id;

 -- Disable learning to stop statistics collection 
 -- and use the optimized plan:

UPDATE aqo_queries SET learn_aqo=false 
  WHERE query_hash = (SELECT query_hash from aqo_query_texts 
  WHERE query_text LIKE 'SELECT * FROM a, b WHERE a.id=b.id;');
</programlisting>

    <para>
      If your data or query distribution is rapidly changing, obsolete statistics may affect <filename>aqo</filename> performance. After a while, <filename>aqo</filename> will learn the new statistics, but it may take longer than expected. To speed up learning, reset the
      statistics. To remove all the collected machine learning
      statistics, run the following command:
    </para>
    <programlisting>
DELETE FROM aqo_data;
</programlisting>
    <para>
      Alternatively, you can specify a particular query type to reset by
      providing its hash value in the <literal>fspace_hash</literal> option. For example:
    </para>
    <programlisting>
DELETE FROM aqo_data WHERE fspace_hash = (SELECT fspace_hash FROM aqo_queries 
  WHERE query_hash = (SELECT query_hash from aqo_query_texts 
  WHERE query_text LIKE 'SELECT * FROM a, b WHERE a.id=b.id;'));
</programlisting>
  
    <para>
      To stop intelligent tuning for a particular query type, disable the <literal>auto_tuning</literal> setting:
    <programlisting>
UPDATE aqo_queries SET auto_tuning=false WHERE query_hash = '<replaceable>hash</>';
</programlisting>
    where <replaceable>hash</> is the hash value for this query type. As a result, <filename>aqo</filename> disables automatic changing of the <literal>learn_aqo</literal> and <literal>use_aqo</literal> settings.
    </para>
    
    <para>
      To disable further learning for a particular query type, use the
      following command:
    <programlisting>
UPDATE aqo_queries SET learn_aqo=false WHERE query_hash = '<replaceable>hash</>';
</programlisting>
    where <replaceable>hash</> is the hash value for this query type.
    </para>

    <para>
      To fully disable <filename>aqo</filename> for all queries and use the default <productname>PostgreSQL</>
      query planner, run:
    </para>
    <programlisting>
UPDATE aqo_queries SET use_aqo=false, learn_aqo=false, auto_tuning=false;
</programlisting>
    </sect3>
  </sect2>
    <sect2 id="aqo-reference">
    <title>Reference</title>
      <sect3 id="aqo-variables">
      <title>Configuration Variables</title>
        <sect4 id="aqo-mode">
        <title><varname>aqo.mode</varname></title>
        <para>Defines <filename>aqo</filename> optimization modes. 
        </para>
        
 <table id="aqo-mode-options">
  <title><varname>aqo.mode</varname> Options</title>
  <tgroup cols="2">
   <thead>
    <row><entry>Option</entry> <entry>Description</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry><literal>intelligent</literal></entry>
     <entry>Auto-tunes your queries based on statistics collected per query type.</entry>
     
    </row>
    <row>
     <entry><literal>forced</literal></entry>
     <entry>Optimizes all queries together, regardless of the query type.</entry>
    </row>
    <row>
     <entry><literal>controlled</literal></entry>
     <entry><emphasis role="strong">Default.</emphasis> Uses the default planner for all new queries, but can reuse the collected statistics for already known query types, if any.</entry>
    </row>
    <row>
     <entry><literal>disabled</literal></entry>
     <entry>Fully disables <filename>aqo</filename> for all queries. The collected statistics and <filename>aqo</filename> settings are saved and can be used in the future. </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
        </sect4>

  
    </sect3>
    <sect3 id="aqo-tables">
      <title>Tables</title>
              <important><para>You can manually change optimization settings in the <structname>aqo_queries</structname> table. Avoid modifying other tables as it may lead to unexpected results.</para>
        </important>
      <sect4 id="aqo-query-texts-table">
        <title><structname>aqo_query_texts</structname> Table</title>
        <para>
          The <structname>aqo_query_texts</structname> table classifies all
          the query types processed by <filename>aqo</filename>. 
        </para>
         <table id="aqo-query-texts-ref">
         <title><structname>aqo_query_texts</structname> Table</title>
  <tgroup cols="2">
   <thead>
    <row><entry>Column Name</entry> <entry>Description</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry><literal>query_hash</literal></entry>
     <entry>Stores the hash value that uniquely identifies the query type.</entry>  
    </row>
    <row>
     <entry><literal>query_text</literal></entry>
     <entry>Provides a sample query of
              the given type.</entry>
    </row>

   </tbody>
  </tgroup>
 </table>
      </sect4>
      <sect4 id="aqo-queries-table">
        <title><structname>aqo_queries</structname> Table</title>
        <para>
          The <structname>aqo_queries</structname> table stores optimization
          settings for different query types.
        </para>

 <table id="aqo-queries-table-ref">
 <title><structname>aqo_queries</structname> Table</title>
  <tgroup cols="2">
   <thead>
    <row><entry>Setting</entry><entry>Description</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry><literal>query_hash</literal></entry>
     <entry>Stores the hash value that uniquely identifies the query type.</entry>
     
    </row>
    <row>
     <entry><literal>learn_aqo</literal></entry>
     <entry>Enables statistics collection
              for this query type.</entry>
    </row>
    <row>
     <entry><literal>use_aqo</literal></entry>
     <entry>Enables <filename>aqo</filename> cardinality
              prediction for the next execution of this query type. If
              cost estimation model is incomplete, this may slow down
              query execution.</entry>
    </row>
    <row>
     <entry><literal>fspace_hash</literal></entry>
     <entry>Provides a unique identifier of
              the separate space in which the statistics for this query type
              is collected. By default, <literal>fspace_hash</literal>
              is equal to <literal>query_hash</literal>. You can change this setting to a different <literal>query_hash</literal> to optimize different query types together. It may decrease the
              amount of memory for models and even improve query
              execution performance. However, changing this setting may
              cause unexpected <filename>aqo</filename> behavior, so make sure to use it only
              if you know what you are doing.</entry>
    </row>
    <row>
     <entry><literal>auto_tuning</literal></entry>
     <entry>Shows whether
              <filename>aqo</filename> tries to tune other settings for
              the given query. By default, auto-tuning in enabled in the
              intelligent mode. In other modes, new queries are not
              appended to <structname>aqo_queries</structname> automatically.
              You can change this behavior by setting the
              <literal>auto_tuning</literal> variable to <literal>true</literal>.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>
      </sect4>
      <sect4 id="aqo-data-table">
        <title><structname>aqo_data</structname> Table</title>
        <para>
          The <structname>aqo_data</structname> table contains machine
          learning data for cardinality estimation refinement. To forget
          all the collected statistics for a particular query type, you
          can delete all rows from <structname>aqo_data</structname> with the corresponding
          <literal>fspace_hash</literal>.
        </para>
      </sect4>
      <sect4 id="aqo-query-stat-table">
        <title><structname>aqo_query_stat</structname> Table</title>
         <para>
          The <structname>aqo_query_stat</structname> table stores statistics
          on query execution, by query type. The <filename>aqo</filename> extension uses this data when the
          <literal>auto_tuning</literal> option is enabled for a
          particular query type.
        </para>
        <table id="aqo-query-stat-ref">
 <title><structname>aqo_query_stat</structname> Table</title>
  <tgroup cols="2">
   <thead>
    <row><entry>Data</entry><entry>Description</entry>
    </row>
   </thead>

   <tbody>
    <row>
     <entry><literal>execution_time_with_aqo</literal></entry>
     <entry>Execution time for queries run with <filename>aqo</filename> enabled.</entry>
     
    </row>
    <row>
     <entry><literal>execution_time_without_aqo</literal></entry>
     <entry>Execution time for queries run with <filename>aqo</filename> disabled.</entry>
    </row>
    <row>
     <entry><literal>planning_time_with_aqo</literal></entry>
     <entry>Planning time for queries run with <filename>aqo</filename> enabled.</entry>
    </row>
    <row>
     <entry><literal>planning_time_without_aqo</literal></entry>
     <entry>Planning time for queries run with <filename>aqo</filename> disabled.</entry>
    </row>
    <row>
     <entry><literal>cardinality_error_with_aqo</literal></entry>
     <entry>Cardinality estimation error in the selected query plans with <filename>aqo</filename> enabled.</entry>
    </row>
    <row>
     <entry><literal>cardinality_error_without_aqo</literal></entry>
     <entry>Cardinality estimation error in the selected query plans with <filename>aqo</filename> disabled.</entry>
    </row>
    <row>
     <entry><literal>executions_with_aqo</literal></entry>
     <entry>Number of queries run with <filename>aqo</filename> enabled.</entry>
    </row>
    <row>
     <entry><literal>executions_without_aqo</literal></entry>
     <entry>Number of queries run with <filename>aqo</filename> disabled.</entry>
    </row>
   </tbody>
  </tgroup>
 </table>

      </sect4>
    </sect3>
  </sect2>
  <sect2 id="aqo-authors">
    <title>Authors</title>
    <para>
    Oleg Ivanov <email>o.ivanov@postgrespro.ru</email>,
    Postgres Professional, Moscow, Russia
    </para>
  </sect2>
</sect1>
