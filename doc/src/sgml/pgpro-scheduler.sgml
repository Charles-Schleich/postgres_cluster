<!-- doc/src/sgml/pgpro-scheduler.sgml -->

<sect1 id="pgpro-scheduler" xreflabel="pgpro_scheduler">
  <title>pgpro_scheduler</title>

  <indexterm zone="pgpro-scheduler">
   <primary>pgpro_scheduler</primary>
  </indexterm>
  <para>
    <filename>pgpro_scheduler</filename> is a built-in <productname>&productname;</productname> extension for scheduling, monitoring, and
    managing job execution within the <productname>&productname;</productname> database. With
    <filename>pgpro_scheduler</filename>, you can:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Set advanced schedules using <type>jsonb</type> objects or <type>crontab</type> strings.
      </para>
    </listitem>
    <listitem>
      <para>
        Dynamically calculate the next execution time for repeated jobs.
      </para>
    </listitem>
    <listitem>
      <para>
        Execute <acronym>SQL</acronym> commands of the job in a single transaction or in
        sequential transactions, if required.
      </para></listitem>
      <listitem><para>
        Submit jobs for immediate or delayed one-time execution in parallel with the scheduled jobs.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Unlike external scheduling daemons,
    <filename>pgpro_scheduler</filename> offers the following benefits:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        Any user can schedule jobs independently.
      </para>
    </listitem>
    <listitem>
      <para>
        Job scheduling can be managed on the fly without restarting the
        database.
      </para>
    </listitem>
    <listitem>
      <para>
        Scheduling is very lightweight since
        <filename>pgpro_scheduler</filename> uses background workers to
        schedule, monitor, and manage job execution. At the same time,
        <filename>pgpro_scheduler</filename> does not require any client connections for scheduling.
      </para>
    </listitem>
    <listitem>
      <para>
        For enhanced stability, each database has its own supervisor scheduler, with each
        scheduled job executed by a separate background worker.
      </para>
    </listitem>
  </itemizedlist>

  <sect2 id="pgpro-scheduler-installation">
    <title>Installation and Setup</title>
      <para>
        The <filename>pgpro_scheduler</filename> extension is included into the <productname>&productname;</productname>.
      </para>
    <para>
      Once you have <productname>&productname;</productname> installed, complete the following steps to enable <filename>pgpro_scheduler</filename>:</para> 
     <orderedlist>
      <listitem>
        <para>Add <filename>pgpro_scheduler</filename> to the
      <varname>shared_preload_libraries</varname> variable in the <filename>postgresql.conf</filename> file:
    <programlisting>
shared_preload_libraries = 'pgpro_scheduler'
</programlisting></para>
      </listitem>
      <listitem>
        <para>
          Create the <filename>pgpro_scheduler</filename> extension using the following query:
        <programlisting>
CREATE EXTENSION pgpro_scheduler;
</programlisting>
Make sure to create the <filename>pgpro_scheduler</filename> extension for each database you are planning to use.</para>
      </listitem>
    </orderedlist>
    <para>
      Once you complete the installation and setup, configure
      <filename>pgpro_scheduler</filename> for your database.
    </para>
  </sect2>

  <sect2 id="pgpro-scheduler-configuration">
   <title>Configuration</title>
          <para>You must have superuser rights to configure <filename>pgpro_scheduler</filename>.</para>
     <para>To configure <filename>pgpro_scheduler</filename>, modify the following settings 
      in the <filename>postgresql.conf</filename> file:
    </para>
        <orderedlist>
      <listitem>
        <para>
          Enable <filename>pgpro_scheduler</filename> for your system.
        <programlisting>
<varname>schedule.enabled</varname> = <literal>on</literal>
</programlisting></para>
      </listitem>
      <listitem>
        <para>
          Specify the names of the databases for which you need to
          schedule jobs, in the comma-separated format:
        <programlisting>
<varname>schedule.database</varname> = '<replaceable>database1</>,<replaceable>database2</>'
</programlisting>
         You can omit this step when using <filename>pgpro_scheduler</filename>
         on a cluster configured with <filename>multimaster</filename>.</para>
      </listitem>
      <listitem>
        <para>
          To control the workload in your system, set the maximum number
          of background workers that can run simultaneously on each
          database:
        </para>
        <programlisting>
<varname>schedule.max_workers</varname> = 5
</programlisting>

      </listitem>
      <listitem><para>Optionally, set the number of background workers available for one-time job execution: </para>
      <programlisting>
<varname>schedule.max_parallel_workers</varname> = 3
</programlisting>
<para>By default, two background workers for one-time jobs are available. These workers are not included into the <varname>schedule.max_workers</> number. Thus, one-time jobs can run in parallel with the scheduled jobs even if all the <varname>schedule.max_workers</> workers are busy.</para>
      </listitem>
      <listitem>
        <para>
          Run <function>pg_reload_conf()</function> for the changes to
          take effect:
        </para>
        <programlisting>
SELECT <function>pg_reload_conf()</>;
</programlisting>
      </listitem>
    </orderedlist>
        <important>
        <para>When setting the
        <varname>schedule.max_workers</> variable, make sure to
        leave enough workers for the rest of the system as other
        subsystems may also use background workers. The
        <varname>schedule.max_workers</> value cannot exceed the
        total number of workers enabled by the
        <varname>max_worker_processes</> <productname>&productname;</productname> variable.
      </para>
      <para>
        The <filename>pgpro_scheduler</filename> extension starts a
        separate background worker for the system, each database, and
        each executed job. For example, if you work with two databases
        and set the maximum number of workers and parallel workers to 5 and 3, respectively,
        <filename>pgpro_scheduler</filename> can use up to 19 workers at
        peak times: one worker is supervising the system, two workers
        are monitoring the two databases, and each database uses five workers for job scheduling and three workers for running one-time jobs. If all background workers are busy, the jobs will wait for the next available worker. Scheduled and one-time jobs have separate job queues.
      </para>
      <para>
        If required, you can later change the number of workers. The
        running jobs will not be affected. 
      </para></important>

      <para>You can also dynamically configure <filename>pgpro_scheduler</filename> from the command line. In this case, you can set different number of workers for different databases:  
    </para>

 <programlisting>
ALTER SYSTEM SET <varname>schedule.enabled</> = <literal>on</>;
ALTER SYSTEM SET <varname>schedule.database</> = '<replaceable>database1</>,<replaceable>database2</>';
ALTER DATABASE <replaceable>database1</> SET <varname>schedule.max_workers</> = 5;
ALTER DATABASE <replaceable>database2</> SET <varname>schedule.max_workers</> = 3;
ALTER SYSTEM SET <varname>schedule.max_parallel_workers</> = 3;
SELECT <function>pg_reload_conf()</>;
</programlisting>
    <para>
      Once the <filename>pgpro_scheduler</filename> is configured, you can
      start scheduling jobs.
    </para>


    <para>
      <emphasis role="strong">See Also</emphasis>
    </para>
    <para><xref linkend="pgpro-scheduler-guc-variables">
    </para>
  </sect2>
   <sect2 id="pgpro-scheduler-usage">
   <title>Usage</title>
  <sect3 id= "pgpro-scheduler-creating-scheduled-jobs">
        <title>Creating Scheduled Jobs</title>
      <para>
        To create and schedule a job, run the
        <function>create_job()</function> function that takes scheduling
        options as a <type>jsonb</type> object:

      <programlisting>
<function>schedule.create_job(<parameter>options</parameter> <type>jsonb</type>)</function>
</programlisting>
      </para>
      <para>
        In the <type>jsonb</type> object, you must specify one or more <acronym>SQL</acronym> commands
        in the <literal>commands</literal> key, and set the job schedule
        with at least one of the following keys:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>dates</literal> &mdash; a single date or an array of
            dates, in the <type>timestamp with time zone</type> format
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>cron</literal> &mdash; a string, in the <type>crontab</type> format
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>rule</literal> &mdash; a <type>jsonb</type> object that includes one
            or more of the following keys:
          </para>
        <itemizedlist>
        <listitem>
          <para>
            <literal>minutes</literal> &mdash; minutes; an array of integers
            in range [0, 59]
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>hours</literal> &mdash; hours; an array of integers in
            range [0, 23]
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>days</literal> &mdash; days of the month; an array of
            integers in range [1, 31]
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>months</literal> &mdash; months; an array of integers in
            range [1, 12]
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>wdays</literal> &mdash; days of the week; an array of
            integers in range [0, 6], where 0 is Sunday.
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>onstart</literal> &mdash; integer value 0 or 1. If
            <literal>onstart</literal> is set to 1, the job is executed
            only once when <filename>pgpro_scheduler</filename> is
            started.
          </para>
        </listitem>
        </itemizedlist>
      </listitem>
      </itemizedlist>

      <para>
        You can combine <literal>dates</literal>,
        <literal>cron</literal>, and <literal>rule</literal> scheduling
        keys for advanced use cases.
      </para>

      <para>
        As a result, <filename>pgpro_scheduler</filename> creates an
        active job with the specified schedule and returns the job ID.
      </para>
        <tip><para>
          For simple job schedules, you can use the following shortcut syntax:
<programlisting>
schedule.create_job(<parameter>cron</parameter>, <parameter>commands</parameter>)
schedule.create_job(<parameter>dates</parameter>, <parameter>commands</parameter>)
</programlisting>
For details, see <xref linkend="schedule-create-job"> function description.</para>
      </tip>
      <para>
        If required, you can later modify one or more scheduling options
        with the <function>set_job_attribute()</function> or
        <function>set_job_attributes()</function> functions, respectively.
      </para>
      <para>
        If all background workers are busy at the specified time, the
        job waits for the next available worker. By default, the
        job can wait forever. You can
        limit the maximum wait time by setting the
        <literal>last_start_available</literal> key, in the <link linkend="datatype-datetime">time interval</link> format.
        If the timeout is reached, <filename>pgpro_scheduler</filename>
        cancels the job execution.
      </para>
      <para>
        <emphasis role="strong">Examples:</emphasis>
      </para>
      <para>
        To run the job every day at 3pm, and, additionally, on December
        31, 2017 at 7pm , and on April 4, 2020 at 1pm:
      </para>
      <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: &quot;SELECT 15&quot;, &quot;cron&quot;: &quot;0 15 * * *&quot;, &quot;dates&quot;: [ &quot;2017-12-31 19:00&quot;, &quot;2020-04-04 13:00&quot; ]}');
</programlisting>
      <para>
        To limit the wait time for job execution to 30 seconds after the
        scheduled time:
      </para>
      <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: &quot;SELECT pg_sleep(100)&quot;, &quot;cron&quot;: &quot;15 */2 * * *&quot;, &quot;last_start_available&quot;: &quot;30 seconds&quot; }');
</programlisting>    
      <sect4 id="pgpro-scheduler-time-window">
        <title>Specifying the Time Window for Job Execution</title>
        <para>
          In addition to the general schedule, you can specify the
          timeframe during which the scheduled job can be executed. To
          ensure that <filename>pgpro_scheduler</filename> only executes
          the job within the specified time window, define the
          <literal>start_date</literal> and <literal>end_date</literal>
          keys, in the <type>timestamp with time zone</type> format. You can set one
          of these keys only to limit the start or the end time,
          respectively. If you define a time window for the job,
          <filename>pgpro_scheduler</filename> will only schedule this job
          within this time window. If the started job is incomplete when
          the specified time window ends,
          <filename>pgpro_scheduler</filename> completes the job and then
          excludes the job from further scheduling.
        </para>
        <para>
          <emphasis role="strong">Examples:</emphasis> </para>
          <para>To start
          scheduling the job only after 11am on May 1, 2017:
        <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: &quot;SELECT now()&quot;, &quot;cron&quot;: &quot;2 17 * * *&quot;, &quot;start_date&quot;: &quot;2017-05-01 11:00&quot; }');
</programlisting>
        </para>
        <para>
          To schedule the job in the timeframe from 11am on May 1 to
          3pm on June 4, 2017:
        <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: &quot;SELECT now()&quot;, &quot;cron&quot;: &quot;2 17 * * *&quot;, &quot;start_date&quot;: &quot;2017-05-01 11:00&quot;, &quot;end_date&quot;: &quot;2017-06-04 15:00&quot; }');
</programlisting>
        </para>
</sect4>
      <sect4 id="pgpro-scheduler-separate-transactions">
        <title>Running <acronym>SQL</acronym> Commands in Separate Transactions</title>
        <para>
          The <literal>commands</literal> key can have values of text
          and array types. If you specify several <acronym>SQL</acronym> commands as text
          separated by semicolons, the whole job is executed in a single
          transaction. If it is critical to perform each <acronym>SQL</acronym> command in
          a separate transaction, pass the <acronym>SQL</acronym> commands as an array. You
          can modify this behavior by setting the
          <literal>use_same_transaction</literal> key to <type>true</type>. In this
          case, <acronym>SQL</acronym> commands in the array are executed in a single transaction.
        </para>
        <para>
          <emphasis role="strong">Examples:</emphasis>
        </para>
        <para>
          To run the whole job in a single transaction:
        </para>
        <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: &quot;SELECT 1; SELECT 2; SELECT 3;&quot;, &quot;cron&quot;: &quot;23 23 */2 * *&quot; }');
</programlisting>
        <para>
          To run commands in separate transactions:
        <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: [ &quot;SELECT 1&quot;, &quot;SELECT 2&quot;, &quot;SELECT 3&quot; ], &quot;cron&quot;: &quot;23 23 */2 * *&quot; }');
</programlisting>
        </para>
        <para>
          To run the whole job in a single transaction when passing the
          commands as an array:
        <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: [ &quot;SELECT 1&quot;, &quot;SELECT 2&quot;, &quot;SELECT 3&quot; ], &quot;cron&quot;: &quot;23 23 */2 * *&quot;, &quot;use_same_transaction&quot;: true }');
</programlisting>
        </para>
      </sect4>
            <sect4 id="pgpro-scheduler-next-start-time">
        <title>Calculating the Next Start Time of the Scheduled Job</title>
        <para>
          For repeated jobs, the next start time can be computed by an SQL statement specified in the 
          <literal>next_time_statement</literal> key. In this case, the
          first job starts on schedule, while all the successive job
          runs occur at the computed times.
        </para>
        <para>
          After the job run completes,
          <filename>pgpro_scheduler</filename> executes the <acronym>SQL</acronym> statement
          in the <literal>next_time_statement</literal> key to calculate
          the next start time and returns the result, in the <type>timestamp
          with time zone</type> type. If the return value is of a different
          type or an error occurs, <filename>pgpro_scheduler</filename>
          marks the job as broken and cancels any further execution.
          This process is repeated for each successive job run.</para>

          <tip><para>When the job run
          completes, <filename>pgpro_scheduler</filename> sets the
          transaction state in the
          <varname>schedule.transaction_state</varname> variable, in the
          <type>text</type> format. You can use this variable in your
          <literal>next_time_statement</literal> to dynamically
          calculate the next start time depending on the transaction
          state. At the time of the
          <literal>next_time_statement</literal> execution, the
          <literal>schedule.transaction_state</literal> variable must
          contain either <literal>success</literal> or
          <literal>failure</literal> state values for the main transaction.
          Other values may indicate an internal
          <filename>pgpro_scheduler</filename> error.
        </para></tip>

        <para>
          <emphasis role="strong">Examples:</emphasis>
        </para>
        <para>
          To run the job first at 10:45, and then in a day after the job completes:
        <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: &quot;SELECT random()&quot;, &quot;cron&quot;: &quot;45 10 * * *&quot;, &quot;next_time_statement&quot;: &quot;SELECT now() + ''1 day''::interval&quot; }');
</programlisting>
        </para>
      </sect4>
            <sect4 id="pgpro-scheduler-additional-conditions">
        <title>Setting Additional Conditions for Job Execution</title>
        <para>
          The <filename>pgpro_scheduler</filename> extension enables you
          to define additional conditions for task execution:</para> 
        <itemizedlist>
        <listitem>
          <para>
          Set time limits for job execution with the
          <literal>max_run_time</literal> key. If the execution time is
          exceeded, <filename>pgpro_scheduler</filename> cancels the job.
          </para>
        </listitem>
                <listitem>
          <para>Define the maximum time a scheduled job can wait for execution
          using the <literal>last_start_available</literal>
          key. If the timeout is reached, <filename>pgpro_scheduler</filename> cancels the job.
          </para>
        </listitem>
        <listitem>
          <para>Schedule a job on behalf of another user with the
          <literal>run_as</literal> key. You must have superuser rights to use this key.
          </para>
        </listitem>
        <listitem>
          <para>Define an <acronym>SQL</acronym> command to execute if the main command fails using the <literal>on_rollback</literal> key.
          </para>
        </listitem>
        </itemizedlist>
        <para>
          <emphasis role="strong">Examples:</emphasis> </para>
          <para>To limit job
          execution to 5 seconds:
        <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: &quot;SELECT pg_sleep(10)&quot;, &quot;cron&quot;: &quot;15 */10 * * *&quot;, &quot;max_run_time&quot;: &quot;5 seconds&quot; }');
</programlisting>
        </para>
        <para>
          To limit the wait time for job execution to 30 seconds after
          the scheduled time:
        <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: &quot;SELECT pg_sleep(100)&quot;, &quot;cron&quot;: &quot;15 */2 * * *&quot;, &quot;last_start_available&quot;: &quot;30 seconds&quot; }');
</programlisting>
        </para>
        <para>
          To start the job on behalf of the <literal>robot</literal>
          user:
        <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: &quot;SELECT session_user&quot;, &quot;cron&quot;: &quot;5 */5 * * *&quot;, &quot;run_as&quot;: &quot;robot&quot; }');
</programlisting>
        </para>
        <para>
          To define a fallback <acronym>SQL</acronym> command in case the main command fails:
        <programlisting>
SELECT schedule.create_job('{&quot;commands&quot;: &quot;SELECT ''zzz''&quot;, &quot;cron&quot;: &quot;55 */12 * * *&quot;, &quot;on_rollback&quot;: &quot;SELECT ''Cannot select zzz''&quot; }');
</programlisting>
        </para>
      </sect4>
  </sect3>
  <sect3><title>Submitting One-Time Jobs</title>
      <para>You can submit jobs for one-time execution using the <function>schedule.submit_job()</function> function. Such jobs use a separate pool of background workers defined by the <varname>schedule.max_parallel_workers</varname> variable, and can run in parallel with the scheduled jobs. By default, two one-time jobs can run concurrently. If you submit more jobs, they will wait in the queue for the next available background worker.</para>
      <para>To execute a one-time job immediately, pass <acronym>SQL</acronym> commands in the <parameter>query</parameter> argument. For example: </para>
      <programlisting>
schedule.submit_job(query := 'select 1');
</programlisting>
<para>Instead of passing <acronym>SQL</acronym> query parameters directly, you can define numbered placeholders in the <parameter>query</parameter> argument, such as $1 and $2, and pass an array of parameters in the <parameter>params</parameter> argument, with each array element corresponding to a placeholder. For brevity, you can omit the <parameter>query</parameter> and <parameter>params</parameter> names:</para>
<programlisting>
schedule.submit_job(query := 'select $1, $2', params := '{&quot;text 1&quot;, &quot;text 2&quot;}')
</programlisting>
        <para>To start a one-time job at the specified time, use the <parameter>run_after</parameter> argument:</para>
        <programlisting>
schedule.submit_job('select ''flowers''', run_after := '2017-03-08 08:00:01');
</programlisting>
      <para>Alternatively, you can delay the job start until the specified jobs are complete using the <parameter>depends_on</parameter> argument. For example, to run a job after completing the jobs with 23, 15, and 334 IDs, run:</para>
        <programlisting>
schedule.submit_job('select ''well done''', depends_on := '{23, 15, 334}')
</programlisting>
<para>If required, you can repeat the job execution by passing the <function>schedule.resubmit()</function> function as part of the <parameter>query</parameter> argument. For example: </para>
<programlisting>
schedule.submit_job('select 1, schedule.resubmit(run_after := '5')');
</programlisting>
<para>The <parameter>run_after</parameter> argument specifies the time interval before the job is restarted, in seconds. By default, the interval is 1 second. </para>
<para>The resubmitted job cannot be executed more than the number of times set in the 
      <parameter>resubmit_limit</parameter> argument. If this limit is reached, the job receives the <literal>done</literal> status, with the corresponding error message. </para>
<para>If you want to cancel a resubmitted job, run:</para>
<programlisting>
schedule.cancel_job(<replaceable>job_id</replaceable> <type>bigint</type>);
</programlisting>
<para>To monitor one-time jobs, use the <link linkend="pgpro-scheduler-job-status">job_status</link> and <link linkend="pgpro-scheduler-all-job-status">all_job_status</link> <filename>pgpro_scheduler</filename> views.</para>
<para>For details on all the functions available for managing one-time jobs, see <xref linkend="pgpro-scheduler-one-time-job-functions">.</para>
     </sect3>
      <sect3 id="pgpro-scheduler-changing-and-removing-jobs">
      <title>Changing and Removing Scheduled Jobs</title>
      <para>
        When you create a new job with the
        <literal>create_job()</literal> function, the job becomes active and
        waits for execution based on the specified schedule. Using the
        job ID returned by the <function>create_job()</function> function,
        you can change the scheduling settings or remove the job from
        the schedule. To change the specified schedule for
        the jobs, use <function>set_job_attribute()</function> or
        <function>set_job_attributes()</function> functions: </para>
        <itemizedlist>
        <listitem>
          <para>To modify a
        single property of the job, run the
        <function>set_job_attribute()</function> function with the job ID,
        the property name to change, and the new value for this
        property.
          </para>
        </listitem>
        <listitem>
          <para>To modify more than one property of the job, run the
        <function>set_job_attributes()</function> function instead. In
        this case, you can specify all the job properties at once in a
        <type>jsonb</type> object. For details on all the keys available for job
        scheduling, see the <function>create_job()</function> function
        description.
          </para>
        </listitem>
        </itemizedlist>
      <para>
        To temporarily exclude the job from scheduling, run the
        <function>deactivate_job()</function> function:
      <programlisting>
<function>schedule.deactivate_job(<parameter>job_id</parameter> <type>integer</type>)</function>
</programlisting>
      </para>
      <para>
        You can re-activate the job later by running the
        <function>activate_job()</function> function:
      <programlisting>
<function>schedule.activate_job(<parameter>job_id</parameter> <type>integer</type>)</function>
</programlisting>
      </para>
      <para>
        To permanently remove the job from the schedule, run the
        <function>drop_job()</function> function:
      <programlisting>
<function>schedule.drop_job(<parameter>job_id</parameter> <type>integer</type>)</function>
</programlisting>
      </para>
    </sect3>
        <sect3 id="pgpro-scheduler-monitoring-jobs">
      <title>Monitoring Scheduled Jobs</title>
        <para>You must have
          superuser rights to monitor job execution for the whole
          system. Otherwise, you can only monitor the jobs that you own.
          To monitor scheduled jobs, <filename>pgpro_scheduler</filename>
          provides multiple functions that return <type>cron_rec</type> or <type>cron_job</type>
          records:
      <itemizedlist>
        <listitem>
          <para>
            <function>get_job()</function> &mdash; retrieves information about
            the job.
          </para>
        </listitem>
        <listitem>
          <para>
            <function>get_owned_cron()</function> &mdash; retrieves the list of jobs
            owned by user.
          </para>
        </listitem>
        <listitem>
          <para>
            <function>get_cron()</function> &mdash; retrieves the list of jobs executed
            by user.
          </para>
        </listitem>
        <listitem>
          <para>
            <function>get_active_jobs()</function> &mdash; returns the list of
            jobs executed at the moment of the function call.
          </para>
        </listitem>
        <listitem>
          <para>
            <function>get_log()</function> &mdash; returns the list of all
            completed jobs.
          </para>
        </listitem>
        <listitem>
          <para>
            <function>get_user_log()</function> &mdash; returns list of the
            completed jobs executed by the specified user.
          </para>
        </listitem>
        <listitem>
          <para>
            <function>clean_log()</function> &mdash; deletes all records with
            information about completed jobs.
          </para>
        </listitem>
      </itemizedlist></para>
          <para>To learn more about each function, see <xref linkend="pgpro-scheduler-functions">.</para>
          </sect3>
   </sect2>
   <sect2 id="pgpro-scheduler-reference">
   <title>Reference</title>
       <sect3 id="pgpro-scheduler-guc-variables">
      <title>GUC Variables</title>
   <variablelist>
    <varlistentry id="pgpro-scheduler-schedule-enable" xreflabel="schedule.enabled">
     <term><varname>schedule.enabled</varname> (<type>boolean</type>)
     <indexterm>
       <primary><varname>schedule.enabled</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Specifies whether <filename>pgpro_scheduler</filename> is enabled on your system.</para>
       <para>Default: <literal>false</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="pgpro-scheduler-schedule-database" xreflabel="schedule.database">
     <term><varname>schedule.database</varname> (<type>text</type>)
     <indexterm>
       <primary><varname>schedule.database</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Specifies the databases for which <filename>pgpro_scheduler</filename> is enabled.
       Database names must be separated by commas.
      </para>
      <para>
        If <filename>pgpro_scheduler</filename> is running on a cluster configured with
        <filename>multimaster</filename>, the database name is derived from the
        <xref linkend="multimaster-conn-strings"> variable.
      </para>
      <para>
       Default: empty string.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="pgpro-scheduler-schedule-schema" xreflabel="schedule.schema">
     <term><varname>schedule.schema</varname> (<type>text</type>)
     <indexterm>
       <primary><varname>schedule.schema</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Deprecated. Specifies the name of a schema where the scheduler
       stores its tables and functions.
       If you need to change the default schema, use <xref linkend="sql-alterextension">.
      </para>
       <para>Default: <literal>schedule</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="pgpro-scheduler-schedule-nodename" xreflabel="schedule.nodename">
     <term><varname>schedule.nodename</varname> (<type>text</type>)
     <indexterm>
       <primary><varname>schedule.nodename</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Specifies the node name of your <productname>&productname;</productname> instance.
      Do not change or use this variable if you run a single-server cluster configuration.
      </para>
      <para>
      On a cluster configured with <filename>multimaster</filename>, the node name is
      derived from the <xref linkend="multimaster-node-id"> variable. For example, if
      <literal>multimaster.node_id = 3</literal>, the <varname>schedule.nodename</>
      variable is set to <literal>mtm-node-3</>. However, if you explicitly set
      the <varname>schedule.nodename</> variable by editing the <filename>postgresql.conf</filename>
      file or running the <command>ALTER</command> command, <filename>pgpro_scheduler</filename>
      will use the provided value, ignoring the <varname>multimaster.node_id</varname> variable.
      </para>
       <para>Default: <literal>master</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="pgpro-scheduler-schedule-max-workers" xreflabel="schedule.max_workers">
     <term><varname>schedule.max_workers</varname> (<type>integer</type>)
     <indexterm>
       <primary><varname>schedule.max_workers</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Specifies the maximum number of simultaneously running scheduled jobs in one database.</para>
       <para>Default: <literal>2</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="pgpro-scheduler-schedule-max-parallel-workers" xreflabel="schedule.max_workers">
     <term><varname>schedule.max_parallel_workers</varname> (<type>integer</type>)
     <indexterm>
       <primary><varname>schedule.max_parallel_workers</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Specifies the maximum number of parallel threads that can be used for executing one-time jobs.</para>
       <para>Default: <literal>2</literal>.
      </para>
     </listitem>
    </varlistentry>


    <varlistentry id="pgpro-scheduler-schedule-transaction-state" xreflabel="schedule.transaction_state">
     <term><varname>schedule.transaction_state</varname> (<type>text</type>)
     <indexterm>
       <primary><varname>schedule.transaction_state</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       An internal variable containing the state of the
                executed job. <filename>pgpro_scheduler</filename> uses this variable when
                calculating the next job start time. Possible values are: 
                <itemizedlist><listitem>
          <para><literal>success</literal> &mdash; transaction has finished successfully.
          </para></listitem><listitem>
          <para><literal>failure</literal> &mdash; transaction has failed to finish.
          </para></listitem><listitem>
          <para><literal>running</literal> &mdash;
                transaction is in progress. </para></listitem>
                <listitem>
          <para><literal>undefined</literal> &mdash; transaction has
                not started yet. </para></listitem></itemizedlist>
      </para><para>At the time of the
          <literal>next_time_statement</literal> execution, the
          <literal>schedule.transaction_state</literal> variable must
          contain either <literal>success</literal> or
          <literal>failure</literal> state values.
          Other values may indicate an internal
          <filename>pgpro_scheduler</filename> error. </para>
     </listitem>
    </varlistentry>
   </variablelist>

    </sect3>
<sect3 id="pgpro-scheduler-sql-schema">
   <title><acronym>SQL</acronym> Schema</title>

      <para>
        To store its internal tables and functions,
        <filename>pgpro_scheduler</filename> uses the
        <literal>schedule</literal> <acronym>SQL</acronym> schema. Direct access to tables is forbidden. To manage job scheduling, use the functions
        defined by the <filename>pgpro_scheduler</filename> extension.
      </para>
  </sect3>

  <sect3 id="pgpro-scheduler-sql-types">
   <title><acronym>SQL</acronym> Types</title>

   <para>
    <filename>pgpro_scheduler</filename> defines two <acronym>SQL</acronym> types and an <acronym>ENUM</acronym> type that are used in return values for some of the <filename>pgpro_scheduler</filename> functions.
   </para>

   <sect4>
    <title>cron_rec</title>
    <para>
     This type contains information about the scheduled job.
<programlisting>
CREATE TYPE schedule.cron_rec AS(
    id integer,             -- job ID
    node text,              -- name of the node
                            -- on which to execute the job
    name text,              -- job name
    comments text,          -- comments about the job
    rule jsonb,             -- scheduling rules
    commands text[],        -- SQL commands to be executed
    run_as text,            -- username of the job executor
    owner text,             -- username of the job owner
    start_date timestamptz,   -- lower bound of the execution window;
                            -- NULL if unbound
    end_date timestamptz,     -- upper bound of the execution window;
                            -- NULL if unbound
    use_same_transaction boolean,   -- true if an array of SQL 
                                    -- commands will be executed 
                                    -- in a single transaction
    last_start_available interval,  -- maximum wait time for 
                                    -- the scheduled job if all 
                                    -- allowed workers are busy
    max_instances int,      -- maximum number of simultaneously 
                            -- running job instances
    max_run_time interval,  -- maximum execution time
    onrollback text,        -- SQL statement to execute 
                            -- if the main transaction fails
    next_time_statement text,   -- SQL statement to calculate 
                                -- the next start time
    active boolean,         -- true if job is scheduled 
                            -- successfully
    broken boolean          -- true if job has errors in 
                            -- configuration that prevented 
                            -- its further execution
);
</programlisting>
    </para>
   </sect4>

   <sect4>
    <title>cron_job</title>
    <para>
     This type contains information about a particular job execution.
<programlisting>
CREATE TYPE schedule.cron_job AS(
    cron integer,           -- job id
    node text,              -- name of the node
                            -- on which to execute the job
    scheduled_at timestamptz, -- scheduled execution time
    name text,              -- job name
    comments text,          -- comments about the job
    commands text[],        -- SQL statement to be executed
    run_as text,            -- username of the job executor
    owner text,             -- username of the job owner
    use_same_transaction boolean,   -- true if an array of SQL 
                                    -- commands will be executed
                                    -- in a single transaction
    started timestamptz,      -- timestamp of the job execution start
    last_start_available timestamp, -- maximum wait time for 
                                    -- the scheduled job if all 
                                    -- allowed workers are busy
    finished timestamptz,     -- timestamp of the job
                            -- execution finish
    max_run_time interval,  -- maximum execution time
    max_instances int,      -- the number of simultaneously 
                            -- running job instances 
    onrollback text,        -- SQL statement to execute if the main
                            -- transaction fails
    next_time_statement text,   -- SQL statement to calculate 
                                -- the next start time
    status text,            -- status of the task: working, done,
                            -- or error
    message text            -- error message
);
</programlisting>
    </para>
   </sect4>
<sect4 id="pgpro-scheduler-job-at-status-type">
  <title>job_at_status</title>
  <para>
    Enumerated type. Can take the following values:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        <literal>submitted</literal> &mdash; the job is submitted into the queue, but the execution has not started yet.
      </para>
    </listitem>
    <listitem>
      <para>
        <literal>processing</literal> &mdash; the job is being executed.
      </para>
    </listitem>
    <listitem>
      <para>
        <literal>done</literal> &mdash; job execution is complete.
      </para>
    </listitem>
  </itemizedlist>
</sect4>

  </sect3>
<sect3 id="pgpro-scheduler-views" xreflabel="Views">
<title>Views</title>
  <para>
   <filename>pgpro_scheduler</filename> provides several views for monitoring execution status of one-time jobs.
  </para>
<sect4 id="pgpro-scheduler-job-status">
  <title>job_status View</title>
  <para>
    Shows the status of one-time jobs belonging to the current user.
  </para>
  <table id="pgpro-scheduler-job-status-view">
        <title>job_status View</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  Column Name
                </entry>
                <entry>
                  Column Type
                </entry>
                <entry>
                  Description
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <literal>id</literal>
                </entry>
                <entry>
                  <type>bigint</type>
                </entry>
                <entry>
                  Job ID.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>node</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>
                  Name of the node on which the job is being executed.
                </entry>
              </row>
              <row>
                <entry>
                 <literal>name</literal>
                </entry>
                <entry>
                 <type>text</type>
                </entry>
                <entry>
                   Name of the job.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>comments</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>
                  Comments about the job.
                </entry>
              </row>
               <row>
                <entry>
                  <literal>run_after</literal>
                </entry>
                <entry>
                  <type>timestamp with time zone</type>
                </entry>
                <entry>
                  Timestamp after which the job execution must start. 
                </entry>
              </row>
              <row>
                <entry>
                  <literal>query</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>
                  <acronym>SQL</acronym> commands executed by the job.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>params</literal>
                </entry>
                <entry>
                  <type>text[]</type>
                </entry>
                <entry>
                   An array of parameters for the <acronym>SQL</acronym> query.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>depends_on</literal>
                </entry>
                <entry>
                  <type>bigint[]</type>
                </entry>
                <entry>
                  An array of job IDs on which the job execution depends.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>run_as</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>
                  User or role with whose rights the job will be executed.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>attempt</literal>
                </entry>
                <entry>
                  <type>bigint</type>
                </entry>
                <entry>
                  The number of execution attempts.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>resubmit_limit</literal>
                </entry>
                <entry>
                  <type>bigint</type>
                </entry>
                <entry>
                  The maximum number of allowed job resubmissions.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>max_wait_interval</literal>
                </entry>
                <entry>
                  <type>interval</type>
                </entry>
                <entry>
                  The maximum time interval to postpone the job
                execution if all background workers are busy
                at the scheduled moment.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>max_duration</literal>
                </entry>
                <entry>
                  <type>interval</type>
                </entry>
                <entry>
                  Time interval during which the job can be executed.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>submit_time</literal>
                </entry>
                <entry>
                  <type>timestamp with time zone</type>
                </entry>
                <entry>
                  Time when the job was submitted to the execution queue.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>start_time</literal>
                </entry>
                <entry>
                  <type>timestamp with time zone</type>
                </entry>
                <entry>
                  Job execution start time.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>canceled</literal>
                </entry>
                <entry>
                  <type>boolean</type>
                </entry>
                <entry>
                  Specifies whether the job was canceled by user.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>is_success</literal>
                </entry>
                <entry>
                  <type>boolean</type>
                </entry>
                <entry><itemizedlist><listitem><para>
                  <literal>true</literal> &mdash; job execution completed successfully.</para></listitem>
                  <listitem><para><literal>false</literal> &mdash; job execution completed with errors.</para></listitem></itemizedlist>
                </entry>
              </row>
              <row>
                <entry>
                  <literal>error</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>Error message.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>done_time</literal>
                </entry>
                <entry>
                  <type>timestamp with time zone</type>
                </entry>
                <entry>Time when the job execution completed.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>status</literal>
                </entry>
                <entry>
                  <type>job_at_status</type>
                </entry>
                <entry>Job status. See the <xref linkend="pgpro-scheduler-job-at-status-type"> for details.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
</sect4>
  <sect4 id="pgpro-scheduler-all-job-status">
    <title>all_job_status View</title>
    <para>
      Shows the status of all one-time jobs. You must have superuser rights to access this view.
    </para>
      <table id="pgpro-scheduler-all-job-status-view">
        <title>all_job_status View</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  Column Name
                </entry>
                <entry>
                  Column Type
                </entry>
                <entry>
                  Description
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <literal>id</literal>
                </entry>
                <entry>
                  <type>bigint</type>
                </entry>
                <entry>
                  Job ID.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>node</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>
                  Name of the node on which the job is being executed.
                </entry>
              </row>
              <row>
                <entry>
                 <literal>name</literal>
                </entry>
                <entry>
                 <type>text</type>
                </entry>
                <entry>
                   Name of the job.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>comments</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>
                  Comments about the job.
                </entry>
              </row>
               <row>
                <entry>
                  <literal>run_after</literal>
                </entry>
                <entry>
                  <type>timestamp with time zone</type>
                </entry>
                <entry>
                  Timestamp after which the job execution must start. 
                </entry>
              </row>
              <row>
                <entry>
                  <literal>query</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>
                  <acronym>SQL</acronym> commands executed by the job.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>params</literal>
                </entry>
                <entry>
                  <type>text[]</type>
                </entry>
                <entry>
                   An array of parameters for the <acronym>SQL</acronym> query.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>depends_on</literal>
                </entry>
                <entry>
                  <type>bigint[]</type>
                </entry>
                <entry>
                  An array of job IDs on which the job execution depends.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>run_as</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>
                  User or role with whose rights the job will be executed.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>attempt</literal>
                </entry>
                <entry>
                  <type>bigint</type>
                </entry>
                <entry>
                  The number of execution attempts.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>owner</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>
                  The user who created the job.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>resubmit_limit</literal>
                </entry>
                <entry>
                  <type>bigint</type>
                </entry>
                <entry>
                  The maximum number of allowed job resubmissions.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>max_wait_interval</literal>
                </entry>
                <entry>
                  <type>interval</type>
                </entry>
                <entry>
                  The maximum time interval to postpone the job
                execution for if all background workers are busy
                at the scheduled moment.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>max_duration</literal>
                </entry>
                <entry>
                  <type>interval</type>
                </entry>
                <entry>
                  Time interval during which the job can be executed.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>submit_time</literal>
                </entry>
                <entry>
                  <type>timestamp with time zone</type>
                </entry>
                <entry>
                  Time when the job was submitted to the execution queue.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>start_time</literal>
                </entry>
                <entry>
                  <type>timestamp with time zone</type>
                </entry>
                <entry>
                  Job execution start time.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>canceled</literal>
                </entry>
                <entry>
                  <type>boolean</type>
                </entry>
                <entry>
                  Specifies whether the job was canceled by user.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>is_success</literal>
                </entry>
                <entry>
                  <type>boolean</type>
                </entry>
                <entry><itemizedlist><listitem><para>
                  <literal>true</literal> &mdash; job execution completed successfully.</para></listitem><listitem><para><literal>false</literal> &mdash; job execution completed with errors.</para></listitem></itemizedlist>
                </entry>
              </row>
              <row>
                <entry>
                  <literal>error</literal>
                </entry>
                <entry>
                  <type>text</type>
                </entry>
                <entry>Error message.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>done_time</literal>
                </entry>
                <entry>
                  <type>timestamp with time zone</type>
                </entry>
                <entry>Time when the job execution completed.
                </entry>
              </row>
              <row>
                <entry>
                  <literal>status</literal>
                </entry>
                <entry>
                  <type>job_at_status</type>
                </entry>
                <entry>Job status. See the <xref linkend="pgpro-scheduler-job-at-status-type"> for details.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
  </sect4>
</sect3>
<sect3 id="pgpro-scheduler-functions">
   <title>Functions</title>
   <para><filename>pgpro_scheduler</filename> provides two separate sets of functions for managing scheduled and one-time jobs:</para>
   <itemizedlist>
   <listitem><para><xref linkend="pgpro-scheduler-scheduled-job-functions">
   </para></listitem>
   <listitem><para><xref linkend="pgpro-scheduler-one-time-job-functions">
   </para></listitem>
   </itemizedlist>
   <para>With each job, you can only use the function specifically tailored for this job type.</para>
<sect4 id="pgpro-scheduler-scheduled-job-functions"><title>Functions for Managing Scheduled Jobs</title>
   <variablelist>
    <varlistentry id="schedule-create-job" xreflabel="schedule.create_job()">
     <term>
      <function>schedule.create_job(<parameter>options</parameter> <type>jsonb</type>)
      </function>
      <indexterm>
       <primary><function>schedule.create_job</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Creates an active job and returns the job ID.
      </para>
        <para>
    <emphasis role="strong">Alternative Syntax:</emphasis>
  </para>
  <programlisting>
schedule.create_job(<parameter>cron</parameter> <type>text</type>, <parameter>commands</parameter> <type>text</type> [, <parameter>node</parameter> <type>text</type>])
schedule.create_job(<parameter>cron</parameter> <type>text</type>, <parameter>commands</parameter> <type>text</type>[] [, <parameter>node</parameter> <type>text</type>])
schedule.create_job(<parameter>dates</parameter> <type>timestamp with time zone</type>, <parameter>commands</parameter> <type>text</type> [, <parameter>node</parameter> <type>text</type>])
schedule.create_job(<parameter>dates</parameter> <type>timestamp with time zone</type>, commands <type>text[]</type> [, <parameter>node</parameter> <type>text</type>])
schedule.create_job(<parameter>dates</parameter> <type>timestamp with time zone[]</type>, <parameter>commands</parameter> <type>text</type> [, <parameter>node</parameter> <type>text</type>])
schedule.create_job(<parameter>dates</parameter> <type>timestamp with time zone[]</type>, <parameter>commands</parameter> <type>text[]</type> [, <parameter>node</parameter> <type>text</type>])
</programlisting>
<para>Arguments:</para>
   <itemizedlist>
    <listitem>
    <para><parameter>options</parameter> &mdash; a <type>jsonb</type> object defining all the job properties. You do not need to define other parameters if the <parameter>data</parameter> is set. All the available <type>jsonb</type> keys are listed in <xref linkend="pgpro-scheduler-jsonb-keys">.</para>
    <para>Type: <type>jsonb</type></para>
    </listitem>
    <listitem>
    <para><parameter>cron</parameter> &mdash; a crontab-like string defining the job schedule.</para>
    <para>Type: <type>text</type></para>
    </listitem>
    <listitem>
    <para><parameter>dates</parameter> &mdash; the exact date or an array of dates for job execution.</para>
    <para>Type: <type>timestamp with time zone</type>, <type>timestamp with time zone[]</type></para>
    </listitem>
    <listitem>
    <para><parameter>commands</parameter> &mdash; <acronym>SQL</acronym> statement to execute. You can pass one or more <acronym>SQL</acronym>
            commands separated by semicolons, or an array of <acronym>SQL</acronym>
            commands. When passed as an array, <acronym>SQL</acronym> commands are
            executed in separate transactions.</para>
            <para>Type: <type>text</type>, <type>text[]</type></para>
    </listitem>
    <listitem>
    <para><parameter>node</parameter> &mdash; the name of the node on which the scheduled jobs
            run. Optional. You may need to specify this argument if you are
            scheduling jobs on a multi-master cluster.</para>
            <para>Type: <type>text</type></para>
    </listitem>
    </itemizedlist>
  <para>
    Return values:
<itemizedlist><listitem><para>
    ID of the created job.</para></listitem></itemizedlist>
  </para>
      <table id="pgpro-scheduler-jsonb-keys">
      <title><type>jsonb</type> Keys for Job Scheduling</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>
                Key
              </entry>
              <entry>
                Type
              </entry>
              <entry>
                Description
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <literal>cron</literal>
              </entry>
              <entry>
                <type>text</type>
              </entry>
              <entry>
                A crontab-like string defining the job schedule. You can
                combine <literal>cron</literal> with
                <literal>rule</literal> and <literal>dates</literal>
                keys, but at least one of them is mandatory.
              </entry>
            </row>
            <row>
              <entry>
                <literal>dates</literal>
              </entry>
              <entry>
                <type>timestamp with time zone</type>, <type>timestamp with time zone[]</type>
              </entry>
              <entry>
                The exact date or an array of dates when the scheduled
                job will be executed. You can combine
                <literal>dates</literal> with <literal>rule</literal>
                and <literal>cron</literal> keys, but at least one of
                them is mandatory.
              </entry>
            </row>
            <row>
              <entry>
                <literal>rule</literal>
              </entry>
              <entry>
                <type>jsonb</type>
              </entry>
              <entry><para>
                A <type>jsonb</type> object defining the job schedule. Mandatory, if
                both <literal>cron</literal> and
                <literal>dates</literal> keys are undefined. The <literal>rule</literal> object 
                includes one or more of the following keys:
               <itemizedlist>
               <listitem>
                <para><literal>minutes</literal> &mdash; minutes; an array of
                integers in range [0, 59] 
                </para></listitem><listitem><para>
                <literal>hours</literal> &mdash;
                hours; an array of integers in range [0, 23]
                </para></listitem><listitem><para>
                <literal>days</literal> &mdash; days of the month; an array of
                integers in range [1, 31]
                </para></listitem><listitem><para><literal>months</literal> &mdash;
                months; an array of integers in range [1, 12]
                </para></listitem><listitem><para>
                <literal>wdays</literal> &mdash; days of the week; an array of
                integers in range [0, 6], where 0 is Sunday.
                </para></listitem><listitem><para>
                <literal>onstart</literal> &mdash; integer value 0 or 1. If
                <literal>onstart</literal> is set to 1, the job is
                executed only once when
                <filename>pgpro_scheduler</filename> is started.</para></listitem></itemizedlist></para>
              </entry>
            </row>
            <row>
              <entry>
                <literal>commands</literal>
              </entry>
              <entry>
                <type>text</type>, <type>text[]</type>
              </entry>
              <entry>
                <acronym>SQL</acronym> statements to execute. You can pass one or more <acronym>SQL</acronym>
                statements separated by semicolons, or an array of <acronym>SQL</acronym>
                statements. When passed as an array, <acronym>SQL</acronym> statements are
                executed in separate transactions by default. You can
                change this behavior by setting the
                <literal>use_same_transaction</literal> key.
              </entry>
            </row>
            <row>
              <entry>
                <literal>name</literal>
              </entry>
              <entry>
                <type>text</type>
              </entry>
              <entry>
                Optional. Job name.
              </entry>
            </row>
            <row>
              <entry>
                <literal>node</literal>
              </entry>
              <entry>
                <type>text</type>
              </entry>
              <entry>
                Optional. The name of the node on which the scheduled
                jobs run. You may need to specify this argument if you
                are scheduling jobs on a multi-master cluster.
              </entry>
            </row>
            <row>
              <entry>
                <literal>comments</literal>
              </entry>
              <entry>
                <type>text</type>
              </entry>
              <entry>
                Optional. Comments about the scheduled job.
              </entry>
            </row>
            <row>
              <entry>
                <literal>run_as</literal>
              </entry>
              <entry>
                <type>text</type>
              </entry>
              <entry>
                Optional. The user to execute command(s).
              </entry>
            </row>
            <row>
              <entry>
                <literal>start_date</literal>
              </entry>
              <entry>
                <type>timestamp with time zone</type>
              </entry>
              <entry>
                Optional. The start of the timeframe when the scheduled
                job can be executed. This key can be <literal>NULL</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>end_date</literal>
              </entry>
              <entry>
                <type>timestamp with time zone</type>
              </entry>
              <entry>
                Optional. The end of the timeframe when the scheduled
                job can be executed. This key can be <literal>NULL</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>use_same_transaction</literal>
              </entry>
              <entry><type>boolean</type></entry>
              <entry>
                Optional. If set to <literal>true</literal>, forces an array of <acronym>SQL</acronym>
                statements to be executed in a single transaction.
                Default: <literal>false</literal>
              </entry>
            </row>
            <row>
              <entry>
                <literal>last_start_available</literal>
              </entry>
              <entry>
                <type>interval</type>
              </entry>
              <entry>
                Optional. The maximum time interval to postpone the job
                execution for if all background workers are
                busy at the scheduled moment. For example, if this
                key is set to '00:02:34', the job will wait for 2
                minutes 34 seconds. If this key is <literal>NULL</literal> or not set, the
                job can wait forever. Default: <literal>NULL</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>max_instances</literal>
              </entry>
              <entry>
                <type>integer</type>
              </entry>
              <entry>
                Optional. The maximum number of job instances that can be executed simultaneously. Default: 1.
              </entry>
            </row>
            <row>
              <entry>
                <literal>max_run_time</literal>
              </entry>
              <entry>
                <type>interval</type>
              </entry>
              <entry>
                Optional. The maximum time interval during which the
                scheduled job can be executed. If this key is <literal>NULL</literal> or
                not set, there are no time limits. Default: <literal>NULL</literal>.
              </entry>
            </row>
            <row>
              <entry>
                <literal>on_rollback</literal>
              </entry>
              <entry>
                <type>text</type>
              </entry>
              <entry>
                Optional. <acronym>SQL</acronym> statement to be executed if
                the main transaction fails.
              </entry>
            </row>
            <row>
              <entry>
                <literal>next_time_statement</literal>
              </entry>
              <entry>
                <type>text</type>
              </entry>
              <entry>
                Optional. <acronym>SQL</acronym> statement to calculate the start time for
                the next job execution. For details, see <xref linkend="pgpro-scheduler-next-start-time">.
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.set_job_attributes(<parameter>job_id</parameter> <type>integer</type>,
       <parameter>data</parameter> <type>jsonb</type>)
      </function>
      <indexterm>
       <primary><function>schedule.set_job_attributes</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Updates properties of the existing job.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job.</para>
        </listitem>
        <listitem>
         <para><parameter>data</parameter> &mdash; a <type>jsonb</type> object with properties to be edited.
          For the list of keys and their structure, see <xref linkend="pgpro-scheduler-jsonb-keys">.
          </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Return values:
       <itemizedlist>
        <listitem>
         <para><parameter>true</parameter> &mdash;  job properties were updated successfully.</para>
        </listitem>
        <listitem>
         <para><parameter>false</parameter> &mdash; job properties were not updated.</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       To update the job properties, you must be the owner of the job or have superuser rights.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.set_job_attribute(<parameter>job_id</parameter> <type>integer</type>,
       <parameter>name</parameter> <type>text</type>,
       <parameter>value</parameter> <type>text</type> || <type>anyarray</type>)
      </function>
      <indexterm>
       <primary><function>schedule.set_job_attribute</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Updates a property of the existing job.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job.</para>
        </listitem>
        <listitem>
         <para><parameter>name</parameter> &mdash; property name.</para>
        </listitem>
        <listitem>
         <para><parameter>value</parameter> &mdash; property value.</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       See <xref linkend="pgpro-scheduler-jsonb-keys"> for the list of job properties you can update.
       Some values are of array types. They should be passed as an array.
       If a value of a wrong type is passed, an exception is raised.
      </para>
      <para>
       Return values:
       <itemizedlist>
        <listitem>
         <para><parameter>true</parameter> &mdash;  job property was updated successfully.</para>
        </listitem>
        <listitem>
         <para><parameter>false</parameter> &mdash; job property was not updated.</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       To update the job properties, you must be the owner of the job or have superuser rights.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.deactivate_job(<parameter>job_id</parameter> <type>integer</type>)
      </function>
     <indexterm>
       <primary><function>schedule.deactivate_job</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Deactivates the job and suspends its further scheduling and execution.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job.</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Return values:
       <itemizedlist>
        <listitem><para>
       <literal>true</literal> &mdash; the job is deactivated successfully.
        </para></listitem>
       <listitem><para>
       <literal>false</literal> &mdash; job deactivation failed.
        </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.activate_job(<parameter>job_id</parameter> <type>integer</type>)
      </function>
     <indexterm>
       <primary><function>schedule.activate_job</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Activates a job and starts its scheduling and execution.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job.</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Return values: 
       <itemizedlist>
        <listitem><para><literal>true</literal> &mdash; the job was activated successfully.</para></listitem>
        <listitem><para><literal>false</literal> &mdash; job activation failed.</para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.drop_job(<parameter>job_id</parameter> <type>integer</type>)
      </function>
     <indexterm>
       <primary><function>schedule.drop_job</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Deletes a job.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job.</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Return values: 
       <itemizedlist>
        <listitem><para><literal>true</literal> &mdash; the job was deleted successfully.</para></listitem>
        <listitem><para><literal>false</literal> &mdash; job was not deleted.</para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_job(<parameter>job_id</parameter> <type>integer</type>)
      </function>
     <indexterm>
       <primary><function>schedule.get_job</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Returns information about the specified job.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job.</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Return values: 
       <itemizedlist>
        <listitem>
         <para>An object of type <type>cron_rec</type>. </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>For details on the <type>cron_rec</type> type, see <xref linkend="pgpro-scheduler-sql-types">.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_owned_cron(<parameter>username</parameter> <type>text</type>)
      </function>
     <indexterm>
       <primary><function>schedule.get_owned_cron</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Retrieves the list of jobs owned by the specified user.
      </para>
      <para>
       Arguments:</para>
       <itemizedlist>
        <listitem>
         <para><parameter>username</parameter> &mdash; username, optional.</para>
        </listitem>
       </itemizedlist>
      <para>Return values:</para>
      <itemizedlist>
        <listitem><para>
       A set of records of type <type>cron_rec</type>.
       These records contain information about all jobs owned by the specified user.
       If the <parameter>username</parameter> is omitted, the session username is used.
       You must have superuser rights to retrieve jobs owned by another user.
      </para></listitem>
       </itemizedlist>     
      <para>For details on the <type>cron_rec</type> type, see <xref linkend="pgpro-scheduler-sql-types">.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_cron(<parameter>username</parameter> <type>text</type>)
      </function>
     <indexterm>
       <primary><function>schedule.get_cron</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Retrieves the list of jobs executed by the specified user.
      </para>
      <para>
       Arguments:</para>
       <itemizedlist>
        <listitem>
         <para><parameter>username</parameter> &mdash; username, optional.</para>
        </listitem>
       </itemizedlist>
      <para>
       Return values:</para>
        <itemizedlist>
        <listitem>
         <para>A set of records of type <type>cron_rec</type>.
       These records contain information about all jobs executed by the specified user.
       If <parameter>username</parameter> is omitted, the session username is used.
       You must have superuser rights to retrieve jobs executed by another user.</para>
     </listitem>
     </itemizedlist>
      <para>
       For details on the <type>cron_rec</type> type, see <xref linkend="pgpro-scheduler-sql-types">.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_active_jobs(<parameter>username</parameter> <type>text</type>)
      </function>
     <indexterm>
       <primary><function>schedule.get_active_jobs</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Returns the list of jobs currently being executed by the specified user.
      </para>
      <para>
       Arguments:</para>
       <itemizedlist>
        <listitem>
         <para><parameter>username</parameter> &mdash; username, optional.</para></listitem>
       </itemizedlist>
      <para>
       If <parameter>username</parameter> is omitted, the session username is used.
       You must have superuser rights to retrieve jobs executed by another user.
      </para>
      <para>
       Return values:</para>
        <itemizedlist>
        <listitem>
         <para>A set of records of type <type>cron_job</type>.</para></listitem></itemizedlist>
       <para>For details on the <type>cron_job</type> type, see <xref linkend="pgpro-scheduler-sql-types">.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_active_jobs()
      </function>
     <indexterm>
       <primary><function>schedule.get_active_jobs</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Returns the list of jobs being currently executed.
       You must have superuser rights to call this function.
      </para>
      <para>
       Return values:</para>
       <itemizedlist>
        <listitem><para>A set of records of type <type>cron_job</type>.</para></listitem></itemizedlist>
       <para>For details on the <type>cron_job</type> type, see <xref linkend="pgpro-scheduler-sql-types">.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_log()
      </function>
     <indexterm>
       <primary><function>schedule.get_log</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Returns the list of all completed jobs.
       You must have superuser rights to call this function.
      </para>
      <para>Return values:</para>
        <itemizedlist>
        <listitem>
         <para>A set of records of type <type>cron_job</type>.</para></listitem></itemizedlist>
       <para>For details on the <type>cron_job</type> type, see <xref linkend="pgpro-scheduler-sql-types">.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_user_log(<parameter>username</parameter> <type>text</type>)
      </function>
     <indexterm>
       <primary><function>schedule.get_user_log</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Returns the list of completed jobs executed by the specified user.
      </para>
      <para>
       Arguments:</para>
       <itemizedlist>
        <listitem>
         <para><parameter>username</parameter> &mdash; username, optional.</para>
        </listitem>
       </itemizedlist>
      <para>
       If <parameter>username</parameter> is omitted, the session username is used.
      You must have superuser rights to retrieve the list of jobs executed by another user.
      </para>
      <para>Return values:</para>
        <itemizedlist>
        <listitem>
         <para>A set of records of type <type>cron_job</type>.</para></listitem></itemizedlist>
       <para>For details on the <type>cron_job</type> type, see <xref linkend="pgpro-scheduler-sql-types">.</para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.clean_log()
      </function>
     <indexterm>
       <primary><function>schedule.clean_log</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Deletes all records with information about the completed jobs.
      You must have superuser rights to call this function.
      </para>
      <para>
       Return values:</para>
       <itemizedlist>
        <listitem>
         <para>The number of records deleted.</para></listitem></itemizedlist>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.nodename()
      </function>
     <indexterm>
       <primary><function>schedule.nodename()</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Returns the current node name.
      </para>
     </listitem>
    </varlistentry>
    </variablelist>
</sect4>
<sect4 id="pgpro-scheduler-one-time-job-functions"><title>Functions for Managing One-Time Jobs</title>
    <variablelist>
        <varlistentry>
     <term>
      <function>schedule.submit_job(<parameter>query</parameter> <type>text</type> [<replaceable>options...</replaceable>])
      </function>
     <indexterm>
       <primary><function>schedule.submit_job</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Submits a job for immediate or delayed one-time execution.
      By default, the job is scheduled for immediate execution and can run in parallel with other scheduled jobs. To submit a job with a delayed start, you can set the execution start time using the <parameter>run_after</parameter> argument, or pass an array of job IDs in the <parameter>depends_on</parameter> argument to schedule job execution right after these jobs are complete. 
      </para>
       <para>Arguments:</para>
    <itemizedlist>
      <listitem>
        <para>
          <parameter>query</parameter> &mdash; <acronym>SQL</acronym> commands to execute. 
        </para>
        <para>Type: <type>text</type></para>
      </listitem>
      <listitem>
        <para>
          <parameter>params</parameter> &mdash; an array of parameters for the SQL query that can
          substitute numbered placeholders in the <parameter>query</parameter> argument, such as $1, $2, etc. Default: <literal>NULL</literal> 
        </para>
        <para>Type: <type>text[]</type></para>
      </listitem>
      <listitem>
        <para>
          <parameter>run_after</parameter> &mdash; a timestamp after which the
          job execution starts. If this argument is set to <literal>NULL</literal>, the job is scheduled for immediate execution. You can also use the <parameter>depends_on</parameter> argument to delay the job start. Default: <literal>NULL</literal>
        </para><para>Type: <type>timestamp with time zone</type></para>
      </listitem>
      <listitem>
        <para>
          <parameter>node</parameter> &mdash; the name of the node on which
          to execute the job. Default: <literal>NULL</literal> 
        </para><para>Type: <type>text</type></para>
      </listitem>
      <listitem>
        <para>
          <parameter>max_duration</parameter> &mdash; the maximum time interval during which the job can be executed. If this time is exceeded, the job is forced
          to stop. If this argument is <literal>NULL</literal> or not set, there are no time limits. Default: <literal>NULL</literal> 
        </para><para>Type: <type>interval</type></para>
      </listitem>
      <listitem>
        <para>
          <parameter>max_wait_interval</parameter> &mdash; the maximum time interval to postpone the job
                execution for if all background workers are busy
                at the scheduled moment. For example, if this
                key is set to '00:02:34', the job will wait for 2
                minutes 34 seconds. If this key is <literal>NULL</literal> or not set, the
                job can wait forever.
          Default: <literal>NULL</literal>
        </para><para>Type: <type>interval</type></para>
      </listitem>
      <listitem>
        <para>
          <parameter>run_as</parameter> &mdash; user or role with
          whose rights the job will be executed. If <parameter>run_as</parameter> is set
          to <literal>NULL</literal>, the job is executed on behalf of the current user. You must have superuser rights to set this argument. 
          Default: <literal>NULL</literal>
        </para><para>Type: <type>text</type></para>
      </listitem>
      <listitem>
        <para>
          <parameter>depends_on</parameter> &mdash; an array of job IDs. The created job
          starts immediately after the specified jobs complete the execution. 
          This argument is an alternative to <parameter>run_after</parameter>. Default: <literal>NULL</literal>
        </para><para>Type: <type>bigint[]</type></para>
      </listitem>
      <listitem>
        <para>
          <parameter>name</parameter> &mdash; name of the job. Default: <literal>NULL</literal> 
        </para><para>Type: <type>text</type></para>
      </listitem>
      <listitem>
        <para>
          <parameter>comments</parameter> &mdash; comments about the job.
        </para><para>Type: <type>text</type></para>
      </listitem>
      <listitem>
        <para>
          <parameter>resubmit_limit</parameter> &mdash; maximum number of times
          the job can be resubmitted for execution. See the
          <function>schedule.resubmit()</function> function for details. Default: 100
        </para><para>Type: <type>bigint</type></para>
      </listitem>
    </itemizedlist>
      <para>
       Return values:</para>
       <itemizedlist>
        <listitem>
        <para>ID of the created job.</para>
        <para>Type: <type>bigint</type></para>
     </listitem></itemizedlist></listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_self_id()</function>
     <indexterm>
       <primary><function>schedule.get_self_id</function></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Returns the ID of the job, in the context of which it was called.
      The returned ID is of the <type>bigint</type> type. This function must be called inside the <parameter>query</parameter> of the <function>schedule.submit_job()</function> function. Otherwise, an exception is raised.
      </para>
      <para>Return values:</para>
       <itemizedlist>
        <listitem>
         <para>Job ID.</para></listitem></itemizedlist>
     </listitem>
    </varlistentry>

        <varlistentry>
     <term>
      <function>schedule.cancel_job(<parameter>job_id</parameter> <type>bigint</type>)</function>
     <indexterm>
       <primary><function>schedule.cancel_job</function></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Cancels all subsequent runs of the specified job. If the job is currently being executed, it will not be interrupted, but cannot be resubmitted. You must have superuser rights or be the owner of the job to call this function.
      </para>
      <para>Arguments:</para>
      <itemizedlist>
      <listitem>
        <para>
          <parameter>job_id</parameter> &mdash; identifier of the job to cancel.</para></listitem></itemizedlist>
      <para>Return values:</para>
     <itemizedlist>
      <listitem>
    <para>
      <literal>true</literal> if the operation completed successfully. 
    </para>
      </listitem>
    <listitem>
    <para>
      <literal>false</literal> if the operation failed.
    </para>
      </listitem>
    </itemizedlist>
    </listitem>
    </varlistentry>

    <varlistentry>
    <term>
      <function>schedule.resubmit(<parameter>run_after</parameter> <type>interval</type> default <type>NULL</type>)</function>
     <indexterm>
       <primary><function>schedule.resubmit</function></primary>
     </indexterm>
     </term>
    <listitem>
    <para>
      Sets the start time for the next execution of the job, without interrupting the current job run. 
      This function must be called inside the <parameter>query</parameter> argument of the <function>schedule.submit_job()</function> function. Otherwise, an exception is raised. If this function is called several times within a single job execution, only the last function call is taken into account.
    </para>
    <para>
      Arguments:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <parameter>run_after</parameter> &mdash; time interval after which the
          job will be resubmitted for execution. Default: 1 second</para>
          <para>Type: <type>interval</type></para>
      </listitem>
    </itemizedlist>
    <para>Return values:</para>
    <itemizedlist>
      <listitem>
      <para>The number of seconds after which the job will be
      resubmitted for execution. 
    </para>
    </listitem>
    </itemizedlist>
    </listitem>
    </varlistentry>
    
   </variablelist>
   </sect4>
   </sect3>
  </sect2>
  <sect2>
  <title>Authors</title>
  <para>Vladimir Ershov <email>v.ershov@postgrespro.ru</email>, Postgres Professional, Moscow, Russia</para>
  </sect2>

</sect1>
