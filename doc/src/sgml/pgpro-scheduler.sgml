<!-- doc/src/sgml/pgpro-scheduler.sgml -->

<sect1 id="pgpro-scheduler" xreflabel="pgpro_scheduler">
  <title>pgpro_scheduler</title>

  <indexterm zone="pgpro-scheduler">
   <primary>pgpro_scheduler</primary>
  </indexterm>

  <sect2>
    <title>
     <filename>pgpro_scheduler</filename> &mdash;
     <productname>&productname;</productname> extension for job scheduling
    </title>

    <para>
     <filename>pgpro_scheduler</filename> allows to schedule jobs execution and
     control their activity in <productname>&productname;</productname> database.
    </para>

    <para>
     The job is a set of <acronym>SQL</acronym> commands. Schedule table
     could be described as a <filename>crontab</filename>-like string or
     as a JSON object. It's possible to use combination of both methods
     for scheduling settings.
    </para>

    <para>
     Each job could calculate its next start time. The set of
     <acronym>SQL</acronym> commands could be executed in a single transaction
     or each command could be executed in individual one.
     It's possible to set an <acronym>SQL</acronym> statement to be executed
     on failure of main job transaction.
    </para>
  </sect2>

  <sect2>
   <title>Installation</title>

   <para>
    <filename>pgpro_scheduler</filename> is a <productname>&productname;</productname>
    extension and it has no special prerequisites.
   </para>

   <para>
    To build extension from the source, make sure that the environment variable
    <envar>PATH</envar> includes path to <application>pg_config</application> utility.
    Also make sure that you have developer version of
    <productname>&productname;</productname> installed or
    <productname>&productname;</productname> was built from source code.
   </para>

   <para>
    Install extension as follows:
<screen>
$ cd pgpro_scheduler
$ make USE_PGXS=1
$ sudo make USE_PGXS=1 install
$ psql <replaceable>dbname</replaceable> -c "CREATE EXTENSION pgpro_scheduler"
</screen>
   </para>
  </sect2>

  <sect2>
   <title>Configuration</title>

   <para>
    The extension defines a number of <productname>&productname;</productname>
    variables (GUC). These variables help to handle scheduler configuration.
   </para>

   <variablelist>
    <varlistentry id="pgpro-scheduler-schedule-enable" xreflabel="schedule.enable">
     <term><varname>schedule.enable</varname> (<type>boolean</type>)
     <indexterm>
       <primary><varname>schedule.enable</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       This parameter specifies, whether the scheduler is enabled in this system.
       Default value: <literal>false</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="pgpro-scheduler-schedule-database" xreflabel="schedule.database">
     <term><varname>schedule.database</varname> (<type>text</type>)
     <indexterm>
       <primary><varname>schedule.database</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       This parameter specifies list of database names on which the scheduler is enabled.
       Database names should be separated by commas. Default value: empty string.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="pgpro-scheduler-schedule-scheme" xreflabel="schedule.scheme">
     <term><varname>schedule.scheme</varname> (<type>text</type>)
     <indexterm>
       <primary><varname>schedule.scheme</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       This parameter specifies the name of a scheme where the scheduler stores
       its tables and functions. Changing this parameter requires a server restart.
       Normally you should not change this parameter but it could be useful
       if you want to run scheduled jobs on a hot-standby database.
       So you can define foreign data wrapper on master system
       to wrap default scheduler schema to another one and use it on replica.
       Default value: <literal>schedule</literal>.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="pgpro-scheduler-schedule-nodename" xreflabel="schedule.nodename">
     <term><varname>schedule.nodename</varname> (<type>text</type>)
     <indexterm>
       <primary><varname>schedule.nodename</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       This parameter specifies a node name of this instance.
       Default value is <literal>master</literal>. You should not change or use it
       if you run single server configuration. But it is necessary to change this name
       if you run scheduler on hot-standby database.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="pgpro-scheduler-schedule-max-workers" xreflabel="schedule.max_workers">
     <term><varname>schedule.max_workers</varname> (<type>integer</type>)
     <indexterm>
       <primary><varname>schedule.max_workers</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       This parameter specifies max number of simultaneously running jobs for one database.
       Default value: <literal>2</literal>.
      </para>
     </listitem>
    </varlistentry>


    <varlistentry id="pgpro-scheduler-schedule-transaction-state" xreflabel="schedule.transaction_state">
     <term><varname>schedule.transaction_state</varname> (<type>text</type>)
     <indexterm>
       <primary><varname>schedule.transaction_state</> pgpro-scheduler parameter</primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       This is internal parameter. It contains state of executed job.
       This parameter was designed to use with a next job start time
       calculation procedure. Possible values are:
        <itemizedlist>
         <listitem>
          <para>
          <literal>success</literal> &mdash; transaction has finished successfully
          </para>
         </listitem>
         <listitem>
          <para>
          <literal>failure</literal> &mdash; transaction has failed to finish
          </para>
         </listitem>
         <listitem>
          <para>
          <literal>running</literal> &mdash; transaction is in progress
          </para>
         </listitem>
         <listitem>
          <para>
          <literal>undefined</literal> &mdash; transaction has not started yet
          </para>
         </listitem>
        </itemizedlist>
       The last two values normally should not appear inside the user procedure.
       If you got them probably it indicates an internal scheduler error.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2>
   <title>Managing scheduler</title>

   <para>
    You could control the scheduler's behavior by means of
    <productname>&productname;</productname> variables described above.
   </para>

   <para>
    For example, suppose we have a fresh <productname>&productname;</productname>
    installation with the <filename>scheduler</filename> extension installed.
    We are going to use the scheduler with databases named
    <literal>database1</literal> and <literal>database2</literal>.
    We want <literal>database1</literal> to be capable
    to run 5 jobs in parallel and <literal>database2</literal> &mdash; 3 jobs.
   </para>

   <para>
    Put the following string in your <filename>postgresql.conf</filename>:
<programlisting>
shared_preload_libraries = 'pgpro_scheduler'
</programlisting>
   </para>

   <para>
    Then start <application>psql</application> and execute the following commands:
<programlisting>
ALTER SYSTEM SET schedule.enable = true;
ALTER SYSTEM SET schedule.database = 'database1,database2';
ALTER DATABASE database1 SET schedule.max_workers = 5;
ALTER DATABASE database2 SET schedule.max_workers = 3;
SELECT pg_reload_conf();
</programlisting>
   </para>

   <para>
    If you do not need the different values in <varname>max_workers</varname>
    you could store the same in configuration file.
    Then ask server to reload configuration. There is no need to restart.
   </para>

   <para>
    Here is an example of <filename>postgresql.conf</filename>:
<programlisting>
shared_preload_libraries = 'pgpro_scheduler'
schedule.enable = on
schedule.database = 'database1,database2'
schedule.max_workers = 5
</programlisting>
   </para>

   <para>
    The scheduler is implemented as background worker which dynamically starts
    another bgworkers. That's why you should care about proper value in
    the <varname>max_worker_processes</varname> variable.
    The minimal acceptable value could be calculated using the following formula:
<programlisting>
min_processes = 1 + num_databases  + max_workers[1] + ... + max_workers[num_databases]
</programlisting>
    where:
    <itemizedlist>
     <listitem>
      <para>
       <literal>min_processes</literal> &mdash; the minimal acceptable amount
       of bgworkers in the system. Note, that other subsystems (e.g. subqueries) need
       to start background workers too. So you need to adjust the value to
       take their needs into account.
      </para>
     </listitem>

     <listitem>
      <para>
       <literal>num_databases</literal> &mdash; the number of databases the scheduler
       works with
      </para>
     </listitem>

     <listitem>
      <para>
       <literal>max_workers</literal> &mdash; the value of <varname>schedule.max_workers</varname>
       variable in context of each database
      </para>
     </listitem>
     </itemizedlist>
   </para>
  </sect2>

  <sect2>
   <title><acronym>SQL</acronym> Scheme</title>

   <para>
    The extension uses <acronym>SQL</acronym> scheme <literal>schedule</literal> to store
    its internal tables and functions. Direct access to tables is forbidden.
    All manipulations should be performed by means of functions defined by extension.
   </para>
  </sect2>

  <sect2 id="pgpro-scheduler-sql-types">
   <title><acronym>SQL</acronym> Types</title>

   <para>
    The scheduler defines two <acronym>SQL</acronym> types and uses them as
    types for return values for some of its functions.
   </para>

   <sect3>
    <title>cron_rec</title>

    <para>
     This type contains information about the job to be scheduled.
<programlisting>
CREATE TYPE schedule.cron_rec AS(
    id integer,             -- job id
    node text,              -- node name to be executed on
    name text,              -- job name
    comments text,          -- job's comments
    rule jsonb,             -- scheduling rules
    commands text[],        -- SQL commands to be executed
    run_as text,            -- name of executor user
    owner text,             -- name of owner user
    start_date timestamp,   -- lower bound of execution window
                            -- NULL if unbound
    end_date timestamp,     -- upper bound of execution window
                            -- NULL if unbound
    use_same_transaction boolean,   -- true if the set of SQL commands
                                    -- will be executed in a single transaction
    last_start_available interval,  -- max time till scheduled job
                                    -- can wait for execution if all allowed
                                    -- workers are busy
    max_instances int,      -- max number of simultaneous running instances
                            -- of this job
    max_run_time interval,  -- max execution time
    onrollback text,        -- SQL command to be performed on transaction
                            -- failure
    next_time_statement text,   -- SQL command to execute on main
                                -- transaction end to calculate next
                                -- start time
    active boolean,         -- true if job could be scheduled
    broken boolean          -- true if job has errors in configuration
                            -- that prevent it's further execution
);
</programlisting>
    </para>
   </sect3>

   <sect3>
    <title>cron_job</title>

    <para>
     This type contains information about job scheduled execution.
<programlisting>
CREATE TYPE schedule.cron_job AS(
    cron integer,           -- job id
    node text,              -- node name to be executed on
    scheduled_at timestamp, -- scheduled execution time
    name text,              -- job name
    comments text,          -- job's comments
    commands text[],        -- SQL commands to be executed
    run_as text,            -- name of executor user
    owner text,             -- name of owner user
    use_same_transaction boolean,   -- true if the set of sql commands
                                    -- will be executed in a single transaction
    started timestamp,      -- timestamp of this job execution started
    last_start_available timestamp, -- time until job must be started
    finished timestamp,     -- timestamp of this job execution finished
    max_run_time interval,  -- max execution time
    max_instances int,      -- the number of instances run at the same time
    onrollback text,        -- statement on ROLLBACK
    next_time_statement text,   -- statement to calculate next start time
    status text,            -- status of this task: working, done, error
    message text            -- error message
);
</programlisting>
    </para>
   </sect3>
  </sect2>

  <sect2>
   <title>Functions</title>

   <variablelist>
    <varlistentry>
     <term>
      <function>schedule.create_job(<parameter>cron</parameter> <type>text</type>,
       <parameter>sql</parameter> <type>text</type>, <parameter>node</parameter> <type>text</type>)
      </function>
      <indexterm>
       <primary><function>schedule.create_job</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Creates job and sets it active.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para>
         <parameter>cron</parameter> &mdash; <filename>crontab</filename>-like string to set schedule
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>sql</parameter> &mdash; SQL statement to execute
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>node</parameter> &mdash; node name, optional
         </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns id of the created job.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.create_job(<parameter>cron</parameter> <type>text</type>,
       <parameter>sqls</parameter> <type>text[]</type>, <parameter>node</parameter> <type>text</type>)
      </function>
      <indexterm>
       <primary><function>schedule.create_job</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
      Creates job and sets it active.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para>
         <parameter>cron</parameter> &mdash; <filename>crontab</filename>-like string to set schedule
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>sqls</parameter> &mdash; set of SQL statements to execute
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>node</parameter> &mdash; node name, optional
         </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns id of the created job.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.create_job(<parameter>date</parameter> <type>timestamp with time zone</type>,
       <parameter>sql</parameter> <type>text</type>,
       <parameter>node</parameter> <type>text</type>)
      </function>
      <indexterm>
       <primary><function>schedule.create_job</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Creates job and sets it active.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para>
          <parameter>date</parameter> &mdash; exact date of execution
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>sql</parameter> &mdash; SQL statement to execute
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>node</parameter> &mdash; node name, optional
         </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns id of the created job.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.create_job(<parameter>date</parameter> <type>timestamp with time zone</type>,
       <parameter>sqls</parameter> <type>text[]</type>,
       <parameter>node</parameter> <type>text</type>)
      </function>
      <indexterm>
       <primary><function>schedule.create_job</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Creates job and sets it active.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para>
          <parameter>date</parameter> &mdash; exact date of execution
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>sqls</parameter> &mdash; set of SQL statements to execute
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>node</parameter> &mdash; node name, optional
         </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns id of the created job.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.create_job(<parameter>dates</parameter> <type>timestamp with time zone[]</type>,
       <parameter>sql</parameter> <type>text</type>,
       <parameter>node</parameter> <type>text</type>)
      </function>
      <indexterm>
       <primary><function>schedule.create_job</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Creates job and sets it active.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para>
          <parameter>dates</parameter> &mdash; set of execution dates
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>sql</parameter> &mdash; SQL statement to execute
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>node</parameter> &mdash; node name, optional
         </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns id of the created job.
      </para>
     </listitem>
    </varlistentry>


    <varlistentry>
     <term>
      <function>schedule.create_job(<parameter>dates</parameter> <type>timestamp with time zone[]</type>,
       <parameter>sqls</parameter> <type>text[]</type>,
       <parameter>node</parameter> <type>text</type>)
      </function>
      <indexterm>
       <primary><function>schedule.create_job</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Creates job and sets it active.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para>
          <parameter>dates</parameter> &mdash; set of execution dates
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>sqls</parameter> &mdash; set of SQL statements to execute
         </para>
        </listitem>
        <listitem>
         <para>
          <parameter>node</parameter> &mdash; node name, optional
         </para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns id of the created job.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry id="schedule-create-job" xreflabel="schedule.create_job">
     <term>
      <function>schedule.create_job(<parameter>data</parameter> <type>jsonb</type>)
      </function>
      <indexterm>
       <primary><function>schedule.create_job</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Creates job and sets it active.
      </para>
      <para>
       The only argument is a JSONB object with information about job.
      </para>
      <para>
       The object can contain the following keys, some of them can be omitted:
       <itemizedlist>
        <listitem>
         <para><literal>name</literal> &mdash; job name;</para>
        </listitem>
        <listitem>
         <para><literal>node</literal> &mdash; node name;</para>
        </listitem>
        <listitem>
         <para><literal>comments</literal> &mdash; job's comments;</para>
        </listitem>
        <listitem>
         <para><literal>cron</literal> &mdash; <filename>crontab</filename>-like string for scheduling settings;</para>
        </listitem>
        <listitem>
         <para><literal>rule</literal> &mdash; scheduling settings as JSONB object (see description below);</para>
        </listitem>
        <listitem>
         <para><literal>command</literal> &mdash; SQL statement to be executed;</para>
        </listitem>
        <listitem>
         <para><literal>commands</literal> &mdash; a set of SQL statements to be executed as an array;</para>
        </listitem>
        <listitem>
         <para><literal>run_as</literal> &mdash; user to execute command(s);</para>
        </listitem>
        <listitem>
         <para><literal>start_date</literal> &mdash; start of interval when scheduled command can be executed, could be NULL;</para>
        </listitem>
        <listitem>
         <para><literal>end_date</literal> &mdash; end of interval when scheduled command can be executed, could be NULL;</para>
        </listitem>
        <listitem>
         <para><literal>date</literal> &mdash; exact date when command will be executed;</para>
        </listitem>
        <listitem>
         <para><literal>dates</literal> &mdash; set of exact dates when command will be executed;</para>
        </listitem>
        <listitem>
         <para><literal>use_same_transaction</literal> &mdash; <literal>true</literal> if set of commands will be executed within a single transaction.
          Default: <literal>false</literal>;</para>
        </listitem>
        <listitem>
         <para><literal>last_start_available</literal> &mdash; for how long command execution could be postponed
          if maximum number of allowed workers reached at the scheduled moment.
          Time set in format of <type>interval</type>. E.g. with '00:02:34' it is possible to wait for
          2 minutes 34 seconds. If time is NULL or not set then wait forever. Default value is NULL;</para>
        </listitem>
        <listitem>
         <para><literal>max_run_time</literal> &mdash; how long scheduled job can be executed. Format: <type>interval</type>.
          If NULL or not set then there is no time limits. Default: NULL;</para>
        </listitem>
        <listitem>
         <para><literal>onrollback</literal> &mdash; SQL statement to be executed on ROLLBACK if main transaction fails.
          Default: not defined;</para>
        </listitem>
        <listitem>
         <para><literal>next_time_statement</literal> &mdash; SQL statement to calculate next start time.</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       The rules of scheduling could be set as <filename>crontab</filename>-like string (key <literal>cron</literal>)
       and also as JSONB object (key <literal>rule</literal>).
      </para>
      <para>
       This object can contain the following keys:
       <itemizedlist>
        <listitem>
         <para><literal>minutes</literal> &mdash; minutes; array of integers in range 0 .. 59;</para>
        </listitem>
        <listitem>
         <para><literal>hours</literal> &mdash; hours; array of integers in range 0 .. 23;</para>
        </listitem>
        <listitem>
         <para><literal>days</literal> &mdash; days of month; array of integers in range 1 .. 31;</para>
        </listitem>
        <listitem>
         <para><literal>months</literal> &mdash; months; array of integers in range 1 .. 12;</para>
        </listitem>
        <listitem>
         <para><literal>wdays</literal> &mdash; days of week; array of integers in range 0 .. 6 (0 is Sunday);</para>
        </listitem>
        <listitem>
         <para><literal>onstart</literal> &mdash; integer value 0 or 1; if value equals to 1
          then the job will be executed on scheduler start only once;</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       The job also could be scheduled on exact date or set of dates.
       Use <literal>date</literal> and <literal>dates</literal> keys accordingly.
      </para>
      <para>
       All scheduling methods could be combined but the use of at least one of them is mandatory.
      </para>
      <para>
       The <literal>next_time_statement</literal> field may contain SQL statement to be executed
       after the main transaction to calculate next start time. If the key is defined,
       the first start time will be calculated by methods described above but
       successive start times will be derived from this statement. The statement must
       return record with the first field containing value of type <type>timestamp with time zone</type>.
       If returning value be of the different type or statement execution produce an error
       the job will be marked as broken and further execution will be cancelled.
      </para>
      <para>
       This statement will be executed in spite of main transaction execution state.
       It's possible to get state of main transaction
       from <productname>&productname;</productname> variable
       <varname>schedule.transaction_state</varname>.
      </para>
      <para>
       The possible values are:
       <itemizedlist>
        <listitem>
         <para><literal>success</literal> &mdash; transaction is successful</para>
        </listitem>
        <listitem>
         <para><literal>failure</literal> &mdash; transaction is failed</para>
        </listitem>
        <listitem>
         <para><literal>running</literal> &mdash; transaction is in progress</para>
        </listitem>
        <listitem>
         <para><literal>undefined</literal> &mdash; transaction has not been started yet</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       The last two values should not appear within user procedure specified in the <literal>next_time_statement</literal> key.
      </para>
      <para>
       SQL statement to be executed could be set in <literal>command</literal> or <literal>commands</literal> key.
       The first one specifies the single statement, the second &mdash; the set of statements.
       In fact the first key can contain the set of commands in one string separated by semicolons.
       In this case they all will be executed in a single transaction in spite of the value <varname>use_same_transaction</varname>.
       So for a set of the statements is better to use the <literal>commands</literal> key as you get more control on execution.
      </para>
      <para>
       Returns id of the created job.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.set_job_attributes(<parameter>job_id</parameter> <type>integer</type>,
       <parameter>data</parameter> <type>jsonb</type>)
      </function>
      <indexterm>
       <primary><function>schedule.set_job_attributes</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Updates properties of the existing job.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job;</para>
        </listitem>
        <listitem>
         <para><parameter>data</parameter> &mdash; JSONB object with properties to be edited.
          The keys and their structure shown in the <xref linkend="schedule-create-job">
          function description.</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       The function returns boolean value:
       <itemizedlist>
        <listitem>
         <para><parameter>true</parameter> &mdash;  properties updated successfully;</para>
        </listitem>
        <listitem>
         <para><parameter>false</parameter> &mdash; properties not updated.</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       To update the properties of the job, the user must be superuser or the the owner of the job.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.set_job_attribute(<parameter>job_id</parameter> <type>integer</type>,
       <parameter>name</parameter> <type>text</type>,
       <parameter>value</parameter> <type>text</type> || <type>anyarray</type>)
      </function>
      <indexterm>
       <primary><function>schedule.set_job_attributes</></primary>
      </indexterm>
     </term>
     <listitem>
      <para>
       Updates a property of the existing job.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job;</para>
        </listitem>
        <listitem>
         <para><parameter>name</parameter> &mdash; property name</para>
        </listitem>
        <listitem>
         <para><parameter>value</parameter> &mdash; property value</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       The full list of the properties could be found in <xref linkend="schedule-create-job"> function description.
       Some values are of array types. They should be passed as an array,
       but if the value could not be an array, the exception will be raised.
      </para>
      <para>
       This function returns boolean value &mdash; <literal>true</literal> on success
       and <literal>false</literal> on failure.
      </para>
      <para>
       To update the properties of the job, the user must be superuser or the the owner of the job.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.deactivate_job(<parameter>job_id</parameter> <type>integer</type>)
      </function>
     <indexterm>
       <primary><function>schedule.deactivate_job</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Deactivates job and suspends its further scheduling and execution.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job;</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns <literal>true</literal> on success, <literal>false</literal> on failure.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.activate_job(<parameter>job_id</parameter> <type>integer</type>)
      </function>
     <indexterm>
       <primary><function>schedule.activate_job</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Activates job and starts its scheduling and execution.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job;</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns <literal>true</literal> on success, <literal>false</literal> on failure.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.drop_job(<parameter>job_id</parameter> <type>integer</type>)
      </function>
     <indexterm>
       <primary><function>schedule.drop_job</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Deletes a job.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job;</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns <literal>true</literal> on success, <literal>false</literal> on failure.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_job(<parameter>job_id</parameter> <type>integer</type>)
      </function>
     <indexterm>
       <primary><function>schedule.get_job</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Deletes a job.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>job_id</parameter> &mdash; identifier of the existing job;</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       The return value is of type <type>cron_rec</type>.
       Description of the type can be found in <xref linkend="pgpro-scheduler-sql-types">.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_user_owned_cron(<parameter>username</parameter> <type>text</type>)
      </function>
     <indexterm>
       <primary><function>schedule.get_user_owned_cron</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Retrieves list of jobs owned by the specified user.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>username</parameter> &mdash; user name, optional</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns a set of records of type <type>cron_rec</type>.
       These records contain information about jobs owned by user.
       If user name is omitted the session user name is used.
       Only superuser can retrieve jobs owned by another user.
      </para>
      <para>
       Description of the <type>cron_rec</type> type can be found in <xref linkend="pgpro-scheduler-sql-types">.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_user_cron(<parameter>username</parameter> <type>text</type>)
      </function>
     <indexterm>
       <primary><function>schedule.get_user_cron</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Retrieves list of jobs executed by the specified user.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>username</parameter> &mdash; user name, optional</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       Returns a set of records of type <type>cron_rec</type>.
       These records contain information about jobs executed by user.
       If user name is omitted the session user name is used.
       Only superuser can retrieve jobs executed by another user.
      </para>
      <para>
       Description of the <type>cron_rec</type> type can be found in <xref linkend="pgpro-scheduler-sql-types">.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_user_active_jobs(<parameter>username</parameter> <type>text</type>)
      </function>
     <indexterm>
       <primary><function>schedule.get_user_active_jobs</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Returns a list of jobs executed in this very moment by the specified user.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>username</parameter> &mdash; user name, optional</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       If user name is omitted then the session user name is used.
       Only superuser can retrieve jobs executed by another user.
      </para>
      <para>
       The return value is a set of records of type <type>cron_job</type>.
       Description of the type can be found in <xref linkend="pgpro-scheduler-sql-types">.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_active_jobs()
      </function>
     <indexterm>
       <primary><function>schedule.get_active_jobs</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Returns a list of jobs being executed at that very moment.
       Only superuser can call this function.
      </para>
      <para>
       The return value is a set of records of type <type>cron_job</type>.
       Description of the type can be found in <xref linkend="pgpro-scheduler-sql-types">.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_log()
      </function>
     <indexterm>
       <primary><function>schedule.get_log</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Returns a list of all the completed jobs.
       Only superuser can call this function.
      </para>
      <para>
       The return value is a set of records of type <type>cron_job</type>.
       Description of the type can be found in <xref linkend="pgpro-scheduler-sql-types">.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.get_user_log()
      </function>
     <indexterm>
       <primary><function>schedule.get_user_log</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
       Returns a list of the completed jobs executed by the specified user.
      </para>
      <para>
       Arguments:
       <itemizedlist>
        <listitem>
         <para><parameter>username</parameter> &mdash; user name, optional</para>
        </listitem>
       </itemizedlist>
      </para>
      <para>
       If user name is omitted then the session user name is used.
       Only superuser can retrieve list of jobs executed by another user.
      </para>
      <para>
       The return value is a set of records of type <type>cron_job</type>.
       Description of the type can be found in <xref linkend="pgpro-scheduler-sql-types">.
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>
      <function>schedule.clean_log()
      </function>
     <indexterm>
       <primary><function>schedule.clean_log</></primary>
     </indexterm>
     </term>
     <listitem>
      <para>
      Deletes all records with information about completed jobs.
      Only superuser can call this function.
      </para>
      <para>
       Returns the number of records deleted.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

</sect1>
